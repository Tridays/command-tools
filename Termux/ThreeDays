#!/usr/bin/env bash

# some constant var
NVIM_ZIP_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/nvim/nvim.zip"
FONT_TAR_XZ_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/nvim/font.tar.xz"
JDK11_ZIP_RELEASES="https://github.com/WindowHZT/termux-ubuntu2004/releases/download/java-jdk-v11.0.12/openjdk-11.0.12-aarch64.zip"
DICT_ZIP_RELEASES="https://github.com/skywind3000/ECDICT-ultimate/releases/download/1.0.0/ecdict-ultimate-sqlite.zip"
NODEJS16_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/node/nodejs-16.tar.xz"
# 
FILE_BROWSER_TAR_GZ_RELEASES="https://github.com/filebrowser/filebrowser/releases/download/v2.23.0/linux-arm64-filebrowser.tar.gz"
UNBLOCK_NETEASE_MUSIC_CLONE="https://github.com/nondanee/UnblockNeteaseMusic"
MUSIC_DL_CLONE="https://github.com/0xHJK/music-dl.git"
WIKIJS_CLONE="https://github.com/requarks/wiki"

#--------------------------------------------- 1级菜单目录 ---------------------------------------------
# 语言安装
_language(){
    main(){
    	OPTIONS=(
			 1 "Java"
             2 "Python"
             3 "C / C++"
             4 "JavaScript / node"
             5 "go"
             6 "tomcat (jsp)"
             7 "<<返回上级目录>>")
        _dialog "首页→配置语言环境" "请选择" $OPTIONS
        
    }
    main
}

# 终端美化
_fish(){
    i(){
        _status fish
        [ "$?" != "0" ]&&_check fish
    }
    d(){
    	_command "pkg remove" "fish" "-y"
    }
    switch(){
    	 OPTIONS=(
             1 "开启"
             2 "关闭")
		_dialog "首页→终端美化→fish→主题→开关" "请选择" $OPTIONS
		case $op in
			1)
				_command "chsh -s fish"
				_enter
				;;
			2)
				_command "chsh -s bash"
				_enter
				;;
		esac
    }
    theme(){
    	fish <<< "omf list">/dev/null 2>&1
    	[ "$?" != "0" ]&&curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish &
		wait
    	fish <<< "omf theme" >~/menu
    	row=$(cat ~/menu | grep -n "Available" | awk -F ":" '{print $1}')
    	sed -i "1,$row"d ~/menu
		
		count=1
		count1=2
		count2=1
		OPTIONS[0]="0"
		OPTIONS[1]="取消"
		thing[0]="0"
		while read x
		do
			for y in $x
			do
				OPTIONS[$count1]="$count2"
				let count1++
				OPTIONS[$count1]="$y"
				thing[$count]="$y"
				let count++
				let count2++
				let count1++
			done
		done < ~/menu
		
        _dialog "首页→终端美化→fish→主题" "请选择" $OPTIONS
		v=${thing[$op]}
		OPTIONS=(
			1 "安装启用${thing[$op]}"
			2 "移除${thing[$op]}"
			3 "取消")
		_dialog "首页→终端美化→fish→主题→安装/卸载" "请选择" $OPTIONS
		case $op in
			1)
				clear
				fish <<< "omf install $v"
				_enter
				;;
			2)
				clear
				fish <<< "omf remove $v"
				_enter
				;;
			*)
				return
				;;
		esac
    }
    main(){
        OPTIONS=(
             1 "安装/卸载fish"
             2 "开启/关闭"
             3 "主题"
             4 "<<返回上级目录>>")
             
        _dialog "首页→终端美化→fish" "请选择" $OPTIONS
        case $op in
			1)
				OPTIONS=(
					1 "安装fish"
					2 "卸载fish"
					3 "<<返回上级目录>>")
				_dialog "首页→终端美化→fish→安装/卸载" "请选择" $OPTIONS
				case $op in
					1)
						i
						;;
					2)
						d
						;;
					*)
						return 0
						;;
					esac
				;;
			2)
		        _status fish
		        [ "$?" != "0" ]&&echo -e "${YELLOW}\n\n请先安装fish${WHITE}"&&return
		        switch
				;;
			3)
		        _status fish
		        [ "$?" != "0" ]&&echo -e "${YELLOW}\n\n请先安装fish${WHITE}"&&return
				theme
				;;
			4)
				return
				;;
		esac
    }
    main
}
_style(){
    OPTIONS=(
         1 "背景颜色"
         2 "字体"
         3 "zsh"
         4 "fish"
         5 "<<返回上级目录>>")
    _dialog "首页→终端美化" "请选择" $OPTIONS
	case $op in
		1)
			echo 
			;;
		2)
			echo 
			;;
		3)
			echo 
			;;
		4)
			_fish
			;;
	esac    
}

# 换源
_sources(){
		OPTIONS=(
			1 "官方源（国外）"
			2 "清华源（国内）"    
			3 "北京外国语源（国内）"    
			4 "阿里源（国内）"
			5 "中科大源（国内）"
			6 "<<返回上级目录>>")

    _dialog "首页→更换源sources.list" "请选择" $OPTIONS

	sourcesFile="/data/data/com.termux/files/usr/etc/apt/sources.list"
	case $op in
    	1)
			cat<<-EOF>$sourcesFile   ##官方
			# The main termux repository, behind cloudflare cache:
			# deb https://packages-cf.termux.dev/apt/termux-main/ stable main
			# The main termux repository:
			deb https://packages.termux.dev/apt/termux-main/ stable main
			EOF
			;;
    	2)
			cat<<-EOF>$sourcesFile   ##清华
			# The termux repository mirror from TUNA:
			deb https://mirrors.tuna.tsinghua.edu.cn/termux/apt/termux-main stable main
			EOF
			;;
    	3)
			cat<<-EOF>"/data/data/com.termux/files/usr/etc/apt/sources.list"  ##北京外国语
			# The main termux repository, behind cloudflare cache:
			# deb https://packages-cf.termux.dev/apt/termux-main/ stable main
			# The main termux repository:
			#deb https://packages.termux.dev/apt/termux-main/ stable main
			deb https://mirrors.bfsu.edu.cn/termux/apt/termux-main stable main
			EOF
			;;
    	4)
			cat<<-EOF>$sourcesFile
			# The termux repository mirror from aliyun:
			deb https://mirrors.aliyun.com/termux/termux-packages-24 stable main
			EOF
			;;
    	5)
			cat<<-EOF>$sourcesFile
			# The termux repository mirror from ustc:
			deb https://mirrors.ustc.edu.cn/termux/apt/termux-main stable main
			EOF
			;;
    	*)
			return 0
			;;
	esac
	clear
	_msg I "更换成功！"
	_msg W "如果网速不能跑满你的宽带网络，请更换其他源"
	_enter
}



#--------------------------------------------- 2级菜单目录 ---------------------------------------------

_filebrowser(){
	i(){
		_checkInstall "$filebrowserPath"
		[ -z "$(dpkg -l | grep termux-services)" ]&&_command "pkg i " "termux-services " "-y"
		mkdir -p $filebrowserPath
		cd $filebrowserPath
		_github_mirror_speed_up release $FILE_BROWSER_TAR_GZ_RELEASES
		_command "wget -c " "$url" " -O filebrowser.tar.gz"
		tar -zxvf filebrowser.tar.gz
		chmod +x filebrowser
		rm filebrowser.tar.gz
		exec $filebrowserPath/filebrowser -d $filebrowserPath/filebrowser.db config init &
		exec $filebrowserPath/filebrowser users add root 888888 --perm.admin -d $filebrowserPath/filebrowser.db &
		exec $filebrowserPath/filebrowser -d $filebrowserPath/filebrowser.db config set --address 127.0.0.1 --port 1234 --root "/data/data/com.termux/files/home" --locale zh-cn &
		sleep 2
		msg I "安装完成！"
		_enter
	}
		start(){
				[ ! -e "$filebrowserPath" ]&&echo -e "${YELLOW}请先安装！${WHITE}"&&_enter&&return
				_command "pkill filebrowser"
				nohup $filebrowserPath/filebrowser -d $filebrowserPath/filebrowser.db &
				echo -e "${GREEN}访问网址：http://127.0.0.1:1234${WHITE}"
				echo -e "${GREEN} 账号：root 密码：888888${WHITE}"
				echo -e "${GREEN}小提示：服务开机自启。（留termux后台运行即可）${WHITE}"
				_enter
			}
		stop(){
			[ ! -e "$filebrowserPath" ]&&echo -e "${YELLOW}请先安装！${WHITE}"&&_enter&&return
				_command "pkill filebrowser"
				_enter
			}	
			
	filebrowserPath="$HOME/.filebrowser"
	    OPTIONS=(
 	        1 "安装filebrowser"
	        2 "开启"
	        3 "关闭"
	        4 "<<返回上级目录>>")
	    _dialog "首页→其他选项→filebrowser文件管理器" "请选择" $OPTIONS
	    case $op in
	    	1)
	    		i
	    		;;
	    	2)
	    		start
	    		;;
	    	3)
	    		stop
	    		;;
	    	*)
    		return 0
    		;;
	    esac
}
_UnblockNeteaseMusic(){
	##解锁网易云
	i(){
		_checkInstall "$HOME/github/UnblockNeteaseMusic"
		mkdir -p $HOME/github
		cd $HOME/github
		[ -z "$(command -v node)" ]&&_command "pkg i -y" "nodejs"
		[ -z "$(command -v git)" ]&&_command "pkg i -y" "git"
		_github_mirror_speed_up clone $UNBLOCK_NETEASE_MUSIC_CLONE
		_command "git clone --depth 1" "$url"
		echo -e "${GREEN}安装完成!${WHITE}"
		_enter
	}
	start(){
		[ ! -e "$HOME/github/UnblockNeteaseMusic" ]&&echo -e "${YELLOW}请先安装music-dl！${WHITE}"&&_enter&&return
		_command "pkill node"
		sleep 1
		_command "node $HOME/github/UnblockNeteaseMusic/app.js -p 8008 -a 127.0.0.1 "
		echo -e "$(
		cat <<-EOF
			●nodejs无法后台
			●WiFi代理：设置→WiFi→选择连接的WiFi→高级设置→代理（PAC）
			    http://127.0.0.1:8008/proxy.pac
		EOF
		)"
		_enter
	}
	stop(){
		[ ! -e "$HOME/github/UnblockNeteaseMusic" ]&&echo -e "${YELLOW}请先安装music-dl！${WHITE}"&&_enter&&return
		_command "pkill node"
		_enter
	}
	    OPTIONS=(
 	        1 "安装UnblockNeteaseMusic"
	        2 "开启"
	        3 "关闭"
	        4 "<<返回上级目录>>")
	    _dialog "首页→其他选项→UnblockNeteaseMusic解锁网易云" "请选择" $OPTIONS
	    case $op in
	    	1)
	    		i
	    		;;
	    	2)
	    		start
	    		;;
	    	3)
	    		stop
	    		;;
	    	*)
    			return 0
    			;;
	    esac	
}
_music-dl(){
	i(){
		_checkInstall $HOME/github/music-dl
		[ ! "$?" == "0" ] && return 0
		[ -z "$(command -v python)" ]&&_command "pkg i -y" "python"
		[ -z "$(command -v git)" ]&&_command "pkg i -y" "git"
		mkdir -p $HOME/github
		cd $HOME/github
		_github_mirror_speed_up clone $MUSIC_DL_CLONE
		_command "git clone --depth 1 " "$url"
		cd music-dl
		pip3 install -r requirements.txt
		_enter
	}
	start(){
		[ ! -e "$HOME/github/music-dl" ]&&echo -e "${YELLOW}请先安装music-dl！${WHITE}"&&_enter&&return
		cd $HOME/github/music-dl
		_command "./music-dl --help"
		_command "./music-dl"
		_enter
	}
	    OPTIONS=(
 	        1 "安装Music-dl"
	        2 "下载音乐"
	        3 "<<返回上级目录>>")
	    _dialog "首页→其他选项→全网音乐下载music-dl" "请选择" $OPTIONS
	    case $op in
	    	1)
	    		_node i
	    		;;
	    	2)
	    		start
	    		;;
	    	*)
    			return 0
  		  		;;
	    esac	
}

_vscode-server(){
	i(){
		[ -n "$(dpkg -l | grep code-server)" ]&&echo -e "${YELLOW}本地已安装有，如需重新安装请先卸载${WHITE}"&&_enter&&return
		echo -e "${YELLOW}如果网速过慢，请科学上网。${WHITE}"
		_command "pkg i -y" "tur-repo code-server"
		echo -e "${GREEN}安装完成！${WHITE}"
		_enter
	}
	d(){
		_command "pkg remove " "tur-repo code-server" "-y"
		echo -e "${GREEN}移除完成！${WHITE}"
		_enter
	}
	switch(){
	    OPTIONS=(
	         1 "开启"
	         2 "关闭"
	         3 "<<返回上级目录>>")
	    _dialog "首页→其他选项→VScode-server→开启/关闭" "请选择" $OPTIONS
		case $op in
			1)
				[ -z "$(dpkg -l | grep termux-services)" ] && _command "pkg i -y" "termux-services"
				mkdir -p $PREFIX/var/service/code-server/log
				cat<<-EOF > $PREFIX/var/service/code-server/run
				#!/data/data/com.termux/files/usr/bin/sh
				code-server
				EOF
				
				cat<<-EOF > $PREFIX/var/service/code-server/log/run
				#!/data/data/com.termux/files/usr/bin/sh
				svlogger="/data/data/com.termux/files/usr/share/termux-services/svlogger"
				exec "\${svlogger}" "\$@"
				EOF
				
				chmod +x $PREFIX/var/service/code-server/run &&chmod +x $PREFIX/var/service/code-server/log/run
				_command "sv-enable code-server"
				echo -e "${YELLOW}\n-------------code-server配置文件-------------${WHITE}"
				cat $HOME/.config/code-server/config.yaml
				echo -e "${YELLOW}---------------------------------------------------${WHITE}"
				_command "sv status code-server"
				echo -e "${GREEN}小提示：服务开机自启。（留termux后台运行即可）${WHITE}"
				_enter
				;;
			2)
				sv-disable code-server
				sv status code-server
				pkill code-server
				kill -9 $(ps -ef | grep code-server | grep -v grep | awk -F " " '{print $2}')
				rm -rf $PREFIX/var/service/code-server
				_enter
				;;
			*)
				return 0
				;;
		esac
	}
	config(){
		address=$(dialog --clear --title "code-server连接地址" \
		--inputbox "输入你的地址(不填为默认值)
		([默认127.0.0.1])" 8 50 \
		3>&1 1>&2 2>&3 3>&-)
		[ -z "$address" ]&&address=127.0.0.1
		
		port=$(dialog --clear --title "code-server连接端口" \
		--inputbox "输入你的端口(不填为默认值)
		([默认8080])" 8 50 \
		3>&1 1>&2 2>&3 3>&-)
		[ -z "$port" ]&&port=8080
		
		password=$(dialog --clear --title "code-server连接密码" \
		--inputbox "输入你的密码(不填为默认值)
		([默认：无])" 8 50 \
		3>&1 1>&2 2>&3 3>&-)
		
		auth=none
		[ -z "$password" ]&&auth=password
		
		cat<<-EOF > $HOME/.config/code-server/config.yaml
		bind-addr: $address:$port
		auth: $auth
		password: $password
		cert: false
		EOF
		echo -e "${YELLOW}\n-------------code-server配置文件-------------${WHITE}"
		cat $HOME/.config/code-server/config.yaml
		echo -e "${YELLOW}---------------------------------------------------${WHITE}"
		echo -e "${GREEN}小提示：关闭后启动配置生效${WHITE}"
		_enter
	}
	main(){
	    OPTIONS=(
	         1 "安装/卸载code-server"
	         2 "开启/关闭"
	         3 "修改配置文件"
			4 "<<返回上级目录>>")
	    _dialog "首页→其他选项→VScode-server" "请选择" $OPTIONS
		case $op in
			1)
				OPTIONS=(
			        1 "安装"
			        2 "卸载")
			    _dialog "首页→其他选项→VScode-server→安装/卸载" "请选择" $OPTIONS
				case $op in
					1)
						i
						;;
					2)
						d
						;;
					esac
				;;
			2)
				switch
				;;
			3)
				config
				;;
			*)
	    		return 0
 		   		;;
			esac
	}
	main
}
_vimIDE(){
	coc(){
		mkdir -p ~/.vim/{autoload,plugged}  ~/.config/coc/extensions/coc-java-data/server/
		download " -c https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim -O $HOME/.vim/autoload/plug.vim"
		cd ~/.vim/plugged
		## 安装coc扩展
		git clone --branch release https://github.com/neoclide/coc.nvim
		download "wget -c https://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz -O ./jdt.tar.gz"
		#将jdt.ls的包解压到这个目录下  
		tar -xzvf jdt.tar.gz -C ~/.config/coc/extensions/coc-java-data/server/
		rm -rf .git jdt.tar.gz
		cat<<-EOF>~/.vimrc
		call plug#begin('~/.vim/plugged') "插件配置目录
		Plug 'neoclide/coc.nvim', {'branch': 'release'} " coc插件管理
		Plug 'honza/vim-snippets' " 提供强大的代码块
		Plug 'yianwillis/vimcdoc' " 中文文档（vimcdoc）
		Plug 'altercation/vim-colors-solarized' " 主题（vim-colors-solarized）
		Plug 'scrooloose/nerdtree' " 目录树(NERDTree)
		Plug 'preservim/tagbar' " 标签导航（Tagbar）
		Plug 'vim-scripts/taglist.vim' " 标签列表(taglist.vim)
		Plug 'vim-airline/vim-airline' " 状态栏优化（vim-airline）
		Plug 'scrooloose/nerdcomm_enter' " 批量注释（nerdcomm_enter）
		Plug 'Yggdroot/indentLine'
		call plug#end()
		EOF
		
		echo -e "${YELLOW}预安装Java、C/C++、Python、Go、Web、MySQL、bash、vimscript开发插件${WHITE}"
		echo -e "${YELLOW}若安装失败（出现红色×），请手动执行 vim -c :PlugInstall 或尝试输入 R 重新下载${WHITE}"
		echo -e "${GREEN}更多插件请访问https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions${WHITE}"
		_enter
		# 配合neocomplete
		#vim -c :"CocInstall coc-java coc-snippets coc-clangd coc-python coc-go coc-html coc-emmet coc-tsserver coc-css coc-sql coc-sh coc-vimlsp " a
		vim -c :PlugInstall
	}
	ycm(){
		cat<<-EOF>~/.vimrc
		call plug#begin('~/.vim/plugged') "插件配置目录
		Plug 'valloric/YouCompleteMe'
		call plug#end()
		EOF
		vim -c :PluginInstall
		cd 
		
		##如果想补全各种语言，则选择完全安装：
		##python3 install.py --all
		##如果只想补全指定语言，则需要指定对应语言的安装方式，如补全C++：
		##python3 install.py --clangd-completer
		##或补全C#：
		##python3 install.py --cs-completer
		##或补全Java：
		##python3 install.py --java-completer
		##或补全Go：
		##python3 install.py --go-completer
	}
	main(){
	    OPTIONS=(
	         1 "vim-plug+coc代码补全"
	         2 "vim-plug+ycm代码补全"
	         3 "<<返回上级目录>>")
 	   _dialog "首页→其他选项→Vim IDE" "请选择" $OPTIONS
	    case $op in
    		1)
    			coc
    			;;
    		2)
    			ycm
    			;;
    		*)
    			return
    			;;
    	esac

	}
	_check "git" "wget" 
	main
}

_nvimIDE(){
	i(){
		clear
		echo -e "$(
			cat <<-EOF
			\n\n｀｀｀｀｀｀｀｀｀${YELLOW} neovim IDE 配置方案 ${WHITE}｀｀｀｀｀｀｀｀｀
			--${GREEN}软件${WHITE}
			    nvim
			--${GREEN}基本插件${WHITE}
			    ●wbthomason/packer.nvim 插件包管理器
			    ●folke/tokyonight.nvim  主题
			    ●nvim-lualine/lualine.nvim  底部状态栏
			    ●kyazdani42/nvim-web-devicons  提供特殊图标字体支持
			    ●nvim-tree/nvim-tree.lua   文档树
			    ●nvim-tree/nvim-web-devicons tree特殊图标字体支持
			    ●nvim-treesitter/nvim-treesitter  根据代码进行语法颜色区分
			    ●p00f/nvim-ts-rainbow  不同的方法和类，括号用不同的颜色区分
			    ●akinsho/toggleterm.nvim  浮动终端
			    ●glepnir/dashboard-nvim  启动页面
			--${GREEN}＊Java Lsp服务器${WHITE}
			    ●mfussenegger/nvim-jdtls   针对Java Lsp，用于支持eclipse.jdt.ls的扩展
			    ●williamboman/mason.nvim   lsp和dap的下载器与管理
			    ●williamboman/mason-lspconfig.nvim  连接mason.nvim与nvim-lspconfig的中间插件
			    ●neovim/nvim-lspconfig   lsp客户端（x移弃）
			    ●folke/lsp-colors.nvim  为lsp客户端设置配色方案
			    ●glepnir/lspsaga.nvim  轻量级Lsp插件，具有高性能UI，功能非常强（显示类、方法信息，根据代码创建大纲，灯泡💡提示，浮动终端等等）
			    ●hrsh7th/cmp-nvim-lsp-signature-help   Lsp插件，功能:提示方法，函数的参数需要
			    ●j-hui/fidget.nvim  jdtls右下角信息提示
			--${GREEN}代码补全${WHITE}
			    ●hrsh7th/nvim-cmp   代码补全核心插件
			    ●hrsh7th/cmp-nvim-lsp  根据lsp服务器进行补全提示
			    ●hrsh7th/cmp-cmdline  nvim命令行模式提示
			    ●f3fora/cmp-spell  英语单词拼写辅助
			    ●hrsh7th/cmp-path  路径补全支持
			    ●hrsh7th/cmp-buffer  nvim-cmp的缓冲词来源
			    ●windwp/nvim-autopairs  自动补全括号（输入左括号，光标移动到中间，输入右括号，跳出括号）
			    ●tzachar/cmp-tabnine  AI补全（暂时没有全部支持aarch64）
			    ●L3MON4D3/LuaSnip   代码块
			    ●saadparwaiz1/cmp_luasnip  代码块支持For luasnip users.
			    ●rafamadriz/friendly-snippets   代码块
			    ●jose-elias-alvarez/null-ls.nvim  代码格式化
			--${GREEN}＊dap代码调试${WHITE}
			    ●mfussenegger/nvim-dap  代码调试debug
			    ●rcarriga/cmp-dap  代码调试
			    ●rcarriga/nvim-dap-ui  调试页面支持
			    ●theHamsta/nvim-dap-virtual-text   此插件为 nvim-dap 添加了虚拟文本支持
			--${GREEN}其他部分插件${WHITE}
			    ●folke/which-key.nvim  快捷键提示
			    ●numToStr/Comment.nvim  自动注释代码
			    ●akinsho/bufferline.nvim  顶部显示buffer缓冲区
			    ●lewis6991/gitsigns.nvim  左则Git提示
			    ●nvim-telescope/telescope.nvim  高度可扩展的模糊查找器
			    ●nvim-lua/plenary.nvim  telescope.nvim必须的依赖插件
			    ●chentoast/marks.nvim  一个行标记
			    ●#norcalli/nvim-colorizer   高性能的高亮插件(暂时考虑可用性)
			    ●JuanZoran/Trans.nvim   英文翻译（单词包128M解压≈1.2G）
			    ●kkharji/sqlite.lua  翻译数据库依赖
			EOF
		)"
		_enter
		_msg W "当前源已切换到外国语学院"
		mkdir -p $HOME/{.vim/dict,.config}
		cat<<-EOF>"/data/data/com.termux/files/usr/etc/apt/sources.list"  ##北京外国语
			# The main termux repository, behind cloudflare cache:
			# deb https://packages-cf.termux.dev/apt/termux-main/ stable main
			# The main termux repository:
			#deb https://packages.termux.dev/apt/termux-main/ stable main
			deb https://mirrors.bfsu.edu.cn/termux/apt/termux-main stable main
		EOF

		_command "pkg update -y"
		_command "pkg i " "tar zip neovim git zig python nodejs openjdk-17* wget stylua maven gradle lua53 ripgrep sqlite termux-api clang lua-language-server mariadb php apache2 nginx php-fpm php-apache yarn graphviz tree golang composer" " -y"
		_command "npm install -g " " eslint clangd bash-language-server vscode-langservers-extracted typescript typescript-language-server"
		_command "pip install "  " black spell autopep8 prettier flake8 debugpy ptvsd neovim"
		
		##下载nvim配置
		cd $HOME/.config
		_github_mirror_speed_up raw "$NVIM_ZIP_RAW"
		_command "wget -c" "$url"
		_github_mirror_speed_up raw "$FONT_TAR_XZ_RAW"
		_command "wget -c" "$url"
		unzip -o nvim.zip
		xz -d font.tar.xz
		tar -xvf font.tar
		mv font.ttf $HOME/.termux
		rm -rf nvim.zip font.tar
		
		##从github下载插件
		_msg I "请确保你的网络能够访问到 http://github.com ！"
		_enter
		sleep 1
		
		##下载jdk11
		if [  ! -e "$PREFIX/opt/openjdk-11.0.12" ];then
			cd $PREFIX/opt
			_github_mirror_speed_up release "$JDK11_ZIP_RELEASES"
			_command "wget -c" "$url"
			unzip -o openjdk-11.0.12-aarch64.zip
			rm -rf openjdk-11.0.12-aarch64.zip
		fi
		
		##配置数据库
		mysql_install_db --force	

		##下载离线单词包 
		if test -e "$HOME/.vim/dict/ultimate.db"; then
		    _msg W "单词库已存在跳过下载！"
		else
			cd $HOME/.vim/dict
			_github_mirror_speed_up release "$DICT_ZIP_RELEASES"
			_command "wget -c" "$url" "-O dict.zip"
			unzip dict.zip 
			rm -rf dict.zip
		fi
		echo "extra-keys = [['ESC','/','-','HOME','UP','END','KEYBOARD'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','SHIFT']] " > $HOME/.termux/termux.properties
		
		_msg W "全屏模式会屏蔽手机状态栏，并且在某些设备上有bug，不一定会成功"
		_enter
	    OPTIONS=(
         1 "需要沉浸模式"
         2 "不需要")
		_dialog "请问是否需要使用全屏模式？" "请问是否需要使用全屏模式？\n请选择" $OPTIONS
		case $op in
			1)
				echo "fullscreen=true" >> $HOME/.termux/termux.properties
				_msg W "如果在你的设备上全屏模式有bug，请访问wiki: https://wiki.termux.com/wiki/Terminal_Settings"
				_msg W "或者取消全屏模式：打开 ~/.termux/termux.properties 删除 fullscreen=true 后，使用命令 termux-reload-settings"
				;;
		esac
		_msg I "配置生效ing…… "
		_command "termux-reload-settings"
   		_msg W "请给termux权限！"
		_enter
		_command "termux-wake-lock"
		_enter
		_command "termux-setup-storage"
		_enter
		echo -e "${GREEN} 隐藏termux底部额外键： ${RED}按手机音量键+ 再按 k 键${GREEN}（真正全屏！）${WHITE}"
		echo -e "${GREEN} 如果下载失败，请多执行安装几次，确保插件全部安装完毕。${WHITE}"
		# echo -e "${GREEN} ●MySQL数据库：$PREFIX/var/lib/mysql${WHITE}"
		# echo -e "${GREEN}     启动MySQL服务：nohup mysqld & 或 nohup mariadbd &${WHITE}"
		# echo -e "${GREEN}     关闭MySQL服务：pkill mysqld 或 pkill mariadbd${WHITE}"
		# echo -e "${GREEN}     初次登陆：mysql -u root${WHITE}"
		# echo -e "${GREEN}     初始化密码：mysqladmin -u root password 123456${WHITE}"
		echo -e "${GREEN} neovim IDE已准备就绪！请打开它吧。${WHITE}"
		_enter;_enter
	}
	d(){
		_msg W "你确定要卸载吗？［回车两次卸载］"
		_enter;_enter
		_command "pkg remove" "neovim" "-y"
		_command "rm -rf" "$HOME/.config/nvim $HOME/.local/share/nvim "
		_command "rm -rf" "$HOME/.vim/dict/ultimate.db $PREFIX/opt/openjdk-11.0.12"
		_msg I "neovim IDE卸载完毕！"
		_enter
	}
	ud(){
		[ ! -e "$HOME/.config/nvim" ] && _msg W "请先安装nvim IDE！" && return 0
		_msg I "测试网络连通性……"
		ping -c 3 gitee.com >/dev/null 2>&1 
		[  "$?" != "0" ] && _msg E "无法访问到Gitee，请检查网络" && return 0
		_msg I "网络连接成功！"
		[ -z "$(command -v wget)" ] && _command "pkg i -y" "wget"
		_msg W "注意！此操作会备份原配置，然后换上新配置配置！"
		_msg W "并且请确保你的网络能够访问到 http://github.com ！"
		_enter
		cd $HOME/.config
		zip -r nvim.bak.zip nvim
		rm -rf nvim
		_msg W "打包旧配置为$HOME/.config/nvim.bak.zip"
		_enter
		_github_mirror_speed_up raw "$NVIM_ZIP_RAW"
		_command "wget -c" "$url"
		_github_mirror_speed_up raw "$FONT_TAR_XZ_RAW"		
		_command "wget -c" "$url"		
		unzip -o nvim.zip
		xz -d font.tar.xz
		tar -xvf font.tar
		mv font.ttf $HOME/.termux
		rm -rf nvim.zip font.tar
		sleep 1
		_msg I "更换nvim需要的字体支持（上百款字体可用访问：https://www.nerdfonts.com下载）"
		_enter
		echo "extra-keys = [['ESC','/','-','HOME','UP','END','KEYBOARD'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','SHIFT']] " > $HOME/.termux/termux.properties
		_msg W "全屏模式会屏蔽手机状态栏，并且在某些设备上有bug，不一定会成功"
		_enter
		
	    OPTIONS=(
         1 "需要沉浸模式"
         2 "不需要")
		_dialog "请问是否需要使用全屏模式？" "请选择" $OPTIONS
		case $op in
			1)
				echo "fullscreen=true" >> $HOME/.termux/termux.properties
				_msg W "如果在你的设备上全屏模式有bug，请访问wiki: https://wiki.termux.com/wiki/Terminal_Settings"
				_msg W "或者取消全屏模式：打开 $HOME/.termux/termux.properties 删除 fullscreen=true 后，使用命令 termux-reload-settings "
				;;
		esac
		_msg I "配置生效ing……"
		termux-reload-settings
		echo -e "${GREEN} 隐藏termux底部额外键： 手机音量键+k （真正全屏！）${WHITE}"
		echo -e "${GREEN} 如果下载失败，请多执行安装几次，确保插件全部安装完毕。${WHITE}"
		echo -e "${GREEN} neovim IDE已准备就绪！请打开它吧。${WHITE}"
		echo -e "\n${GREEN}[$(date +"%Y年%m月%d日-%H时%M分%S秒")]更新成功${WHITE}"
		_enter
	}
    OPTIONS=(
         1 "安装nvim IDE"
         2 "卸载nvim IDE"
         3 "更新nvim IDE配置文件"
         4 "<<返回上级目录>>")
   _dialog "nim IDE v0.5" "请选择" $OPTIONS
    case $op in
   		1)
   			i
   			;;
		2)
			d
			;;
		3)
			ud
			;;
		*)
			return 0
			;;
	esac
}


# 更新脚本
_update(){
	[ -z "$(command -v wget)" ] && _command "pkg i -y" "wget"
	rm -rf $PREFIX/bin/td $CONFIG
	# fun文件
	_github_mirror_speed_up raw $THREEDAYS_RAW
	_command "wget -c" "$url" "-O $CONFIG"
	# main脚本
	_github_mirror_speed_up raw $TERMUX_AARCH64_TD_RAW
	_command "wget -c" "$url" "-O $PREFIX/bin/td"
	chmod 775 $PREFIX/bin/td $CONFIG
	echo -e "\n${GREEN}[$(date +"%Y年%m月%d日-%H时%M分%S秒")]更新成功！${WHITE}"	
	exit
}

_wikijs(){
	_i(){
		echo -e "$(
			cat<<-EOF
			${GREEN}简介：${WHITE}Wiki.js 是一个基于 NodeJS 的现代、轻量级和强大的 wiki 应用程序。较适合做小团队的知识库，一方面适合管理和阅读，另一方面还能协同创作。
			${GREEN}Github：${WHITE}https://github.com/requarks/wiki
			${GREEN}使用说明书：${WHITE}https://docs.requarks.io/install/requirements
			${RED}环境要求：${WHITE}
			\t${GREEN}数据库(以下其一)：${WHITE}
			\t\t●MySQL ≥8.0
			\t\t●MariaDB ≥10.2.7
			\t\t●SQLite ≥3.9
			\t\t●MS SQL Server ≥2012  (仅供参考)
			\t${GREEN}Node.js：${WHITE}
			\t\t● 16.0.0≤ node <17.0.0  (推荐)
			EOF
		)"
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] || return 0
		# install wiki.js
		_checkInstall "$HOME/wiki" || return 0
		_github_mirror_speed_up clone $WIKIJS_CLONE
		_command "git clone --depth 1" "$url"
		# install nodejs-16
		cd $PREFIX/opt
		rm -rf nodejs-16*
		_github_mirror_speed_up raw $NODEJS16_RAW
		_command "wget -c" "$url"
		xz -d nodejs-16.tar.xz
		tar -xvf nodejs-16.tar
		rm -rf nodejs-16.tar
	    # 选择数据库
	    OPTIONS=(
			1 "MySQL｜localhost:3306"
			2 "MariaDB｜localhost:3306"
			3 "sqlite｜localhost:3306")
		_dialog "数据库选择" "请选择数据库信息" $OPTIONS
		
		# 暂且固定为MySQL
		op=1
		# MySQL
		if [ "$op" == "1" ];then
			password=""
			while :
			do
				password=$(dialog --clear --title "请输入MySQL 用户root的密码" \
				--inputbox "输入root的密码：" 8 50 \
				3>&1 1>&2 2>&3 3>&-)
				
				clear
				mysql -uroot -p$password -e "create database if not exists wiki;show databases;"
				if [ "$?" == "0" ];then
					_msg W "成功创建wiki数据库！"
					_enter
					break
				else
					_msg E "创建wiki数据库失败！请检查数据库是否在运行 或 密码是否正确"
					_enter
				fi
			done
			# 配置wiki.js文件
			cd $HOME/wiki
			cp config.sample.yml config.yml
			sed -i "s#type: postgres#type: mysql#g;s#port: 5432#port: 3306#g;s#user: wikijs#user: root#g;s#pass: wikijsrocks#pass: $password#g" config.yml
		# MariaDB
		elif [ "$op" == "2" ];then
			echo
		# sqlite
		elif [ "$op" == "3" ];then
			echo
		fi
		_msg I "wiki.js安装成功！"
		_enter
	}
    OPTIONS=(
         1 "安装｜卸载Wiki js"
         2 "启动服务"
         3 "关闭服务"
         4 "<<返回上级目录>>")
   _dialog "首页→其他选项→Wiki.js" "请选择" $OPTIONS
    case $op in
   		1)
   			_i
   			;;
		2)
			_open
			;;
		3)
			_close
			;;
		*)
			return 0
			;;
	esac
}








# main
_otherOP(){
    OPTIONS=(
         1 "VScode-server"
         2 "Alist"
         3 "nvim IDE"
         4 "filebrowser文件管理器"
         5 "猛犸充电"
         6 "解锁网易云灰色歌曲"
         7 "音乐下载器music-dl"
         8 "Wiki.js"
         9 "MySQL"
         10 "<<返回上级目录>>"
         11 "退出脚本")
    _dialog "首页→其他选项" "请选择" $OPTIONS
    case $op in
    	1)
    		_node _vscode-server
    		;;
    	2)
    		echo
    		;;
    	3)
    		_node _nvimIDE
    		;;
    	4)
    		_node _filebrowser
    		;;
    	5)
    		echo
    		;;
    	6)
    		_node _UnblockNeteaseMusic
    		;;
    	7)
    		_node _music-dl
    		;;
    	8)
    		_wikijs
    		;;
		9)
    		_mysql
    		;;
    	10)
    		return 0
    		;;
    	*)
    		exit
    		;;
    esac
}


