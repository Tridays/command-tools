#!/usr/bin/env bash

# some constant var
NVIM_ZIP_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/nvim/nvim.zip"
FONT_TAR_XZ_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/nvim/font.tar.xz"
JDK11_ZIP_RELEASE="https://github.com/WindowHZT/termux-ubuntu2004/releases/download/java-jdk-v11.0.12/openjdk-11.0.12-aarch64.zip"
DICT_ZIP_RELEASE="https://github.com/skywind3000/ECDICT-ultimate/releases/download/1.0.0/ecdict-ultimate-sqlite.zip"
NODEJS16_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/node/nodejs-16.19.1-aarch64.deb"
HMacMd5Utils_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/mmcd/HMacMd5Utils.java"
# 
FILE_BROWSER_TAR_GZ_RELEASE="https://github.com/filebrowser/filebrowser/releases/download/v2.23.0/linux-arm64-filebrowser.tar.gz"
UNBLOCK_NETEASE_MUSIC_CLONE="https://github.com/nondanee/UnblockNeteaseMusic"
MUSIC_DL_CLONE="https://github.com/0xHJK/music-dl.git"
WIKIJS_RELEASE="https://github.com/requarks/wiki/releases/download/v2.5.297/wiki-js.tar.gz"
WORDPRESS="https://cn.wordpress.org/wordpress-6.1.1-zh_CN.zip"
TOMCAT_RELEASE="https://github.com/WindowHZT/termux-ubuntu2004/releases/download/tomcat/tomcat.zip"
FISH_RAW="https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install"
SPEEDTEST_RAW="https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py"
#--------------------------------------------- 1级菜单目录 ---------------------------------------------
# 终端美化
_fish(){
	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}简介：${WHITE}
			${GREEN}官网：${WHITE}
			EOF
		)"
		# install fish
		if [ -n "$(dpkg -l | grep fish)" ];then
			_msg W "本地已安装fish"
			echo -en "${RED}是否卸载？[Y/N]${WHITE}" ""
			read op
			case $op in
			y|Y)
				_command "apt purge" "fish" "-y"
				;;
			*)
				return 0
				;;
			esac
		fi
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		_msg W "如果网速过慢，请科学上网"
		yes | pkg update
		_command "pkg i -y" "fish"
		# font
		_command "-raw" "wget -c" "$FONT_TAR_XZ_RAW"
		xz -d font.tar.xz
		tar -xvf font.tar
		mv -f font.ttf $HOME/.termux
		rm -rf font.tar
		termux-reload-settings
		_msg W "如果字体显示不正常，请使用下面命令配置字体\ntermux-reload-settings"
		_msg I "安装完成！"
		_enter
	}
	_switch(){
		clear
		[ -z "$(dpkg -l | grep fish)"  ] && _msg E "请先安装fish！" && _enter && return 0
		OPTIONS=(
             "开启"
             "关闭")
		_dialog "首页→终端美化→fish→开关" "请选择" $OPTIONS
		case $op in
			1)
				_command "chsh -s fish"
				_enter
				;;
			2)
				_command "chsh -s bash"
				_enter
				;;
		esac
	}
	_theme(){
		clear
		[ -z "$(dpkg -l | grep fish)"  ] && _msg E "请先安装fish！" && _enter && return 0
    	shell=$(echo $SHELL | awk -F "/" '{print $NF}')    	
    	
    	# 安装omf
    	fish <<< "omf.index.query --type=theme" >/dev/null 2>&1
    	if [ ! "$?" == "0" ];then
	    	rm -rf "$HOME/.local/share/omf"
			mkdir -p $HOME/.cache/download
			cd $HOME/.cache/download
			rm -rf ./install
			_command "-raw" "wget -c" "$FISH_RAW" "-O $HOME/.cache/download/install"
			row=$(cat ./install | grep -n "exec" | awk -F ":" '{print $1}')
   			sed -i ${row}d ./install
   			fish ./install
    		cd $HOME
    	fi
		OPTIONS=($(fish <<< "omf.index.query --type=theme"))
		tmp=(${OPTIONS[*]})
		[ ${#tmp[@]} -lt 10 ] && _msg E "未查询到主题，请重试！" && _enter && return 0

        _dialog "首页→终端美化→fish→主题" "请选择" $OPTIONS
		v=${tmp[$(($op-1))]}
		OPTIONS=(
			"使用$v主题"
			"移除$v主题")
		_dialog "首页→终端美化→fish→主题→启用/移除" "请选择" $OPTIONS
		case $op in
			1)
				clear
  			  	fish <<< "omf install $v"
  			  	if [ "$?" == "0" ];then
  			  		fish <<< "omf theme $v"
  			  	  	_msg W "重新打开终端主题生效！"
  			  	else
	  			  	_msg W "主题下载失败请科学上网！"
  			  	fi
				_enter
				;;
			2)
				clear
  			  	fish <<< "omf remove $v"
  			  	_msg W "重新打开终端生效！"
				_enter
				;;
		esac
	}
	OPTIONS=(
         "安装｜卸载fish"
         "启用｜关闭"
         "主题"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→fish" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _switch
			;;
		3)
			_node _theme
			;;
		*)
			return 0
			;;
	esac
}



_style(){
    OPTIONS=(
         "背景颜色"
         "字体"
         "zsh"
         "fish"
         "<<返回上级目录>>")
    _dialog "首页→终端美化" "请选择" $OPTIONS
	case $op in
		1)
			_msg W "功能暂时不开放"
			;;
		2)
			_msg W "功能暂时不开放"
			;;
		3)
			_msg W "功能暂时不开放"
			;;
		4)
			_node _fish
			;;
	esac    
}

# 换源
_sources(){
		OPTIONS=(
			"官方源（国外）"
			"清华源（国内）"    
			"北京外国语源（国内）"    
			"阿里源（国内）"
			"中科大源（国内）"
			"<<返回上级目录>>")

    _dialog "首页→更换源sources.list" "请选择" $OPTIONS

	sourcesFile="/data/data/com.termux/files/usr/etc/apt/sources.list"
	case $op in
    	1)
			cat<<-EOF>$sourcesFile   ##官方
			# The main termux repository, behind cloudflare cache:
			# deb https://packages-cf.termux.dev/apt/termux-main/ stable main
			# The main termux repository:
			deb https://packages.termux.dev/apt/termux-main/ stable main
			EOF
			;;
    	2)
			cat<<-EOF>$sourcesFile   ##清华
			# The termux repository mirror from TUNA:
			deb https://mirrors.tuna.tsinghua.edu.cn/termux/apt/termux-main stable main
			EOF
			;;
    	3)
			cat<<-EOF>"/data/data/com.termux/files/usr/etc/apt/sources.list"  ##北京外国语
			# The main termux repository, behind cloudflare cache:
			# deb https://packages-cf.termux.dev/apt/termux-main/ stable main
			# The main termux repository:
			#deb https://packages.termux.dev/apt/termux-main/ stable main
			deb https://mirrors.bfsu.edu.cn/termux/apt/termux-main stable main
			EOF
			;;
    	4)
			cat<<-EOF>$sourcesFile
			# The termux repository mirror from aliyun:
			deb https://mirrors.aliyun.com/termux/termux-packages-24 stable main
			EOF
			;;
    	5)
			cat<<-EOF>$sourcesFile
			# The termux repository mirror from ustc:
			deb https://mirrors.ustc.edu.cn/termux/apt/termux-main stable main
			EOF
			;;
    	*)
			return 0
			;;
	esac
	clear
	_msg I "更换成功！"
	_msg W "如果网速不能跑满你的宽带网络，请更换其他源"
	_enter
}



#--------------------------------------------- 2级菜单目录 ---------------------------------------------

_filebrowser(){
	filebrowserPath="$PREFIX/opt/filebrowser"
	_i(){
		clear
		echo -e "\n\n$(
			cat<<-EOF
			${GREEN}简介：${WHITE}filebrowser在指定目录中提供了一个web文件管理界面，它可以用于上传、删除、预览、重命名和编辑文件。
			${GREEN}官网：${WHITE}https://github.com/filebrowser/filebrowser
			EOF
		)"
		# install filebrowser
		_checkInstall "$filebrowserPath"  && pkill -9 filebrowser && rm -rf "$PREFIX/var/service/filebrowser" || return 0
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		_msg W "如果网速过慢，请科学上网"
		mkdir -p $filebrowserPath
		cd $filebrowserPath
		_command "-release" "wget -c " "$FILE_BROWSER_TAR_GZ_RELEASE" " -O filebrowser.tar.gz"
		tar -zxvf filebrowser.tar.gz
		chmod +x filebrowser
		rm filebrowser.tar.gz
		$filebrowserPath/filebrowser -d $filebrowserPath/filebrowser.db config init 
		$filebrowserPath/filebrowser users add root 123456 --perm.admin -d $filebrowserPath/filebrowser.db 
		$filebrowserPath/filebrowser -d $filebrowserPath/filebrowser.db config set --address 127.0.0.1 --port 1234 --root "$HOME" --locale zh-cn 
		_msg I "安装完成！"
		_enter
	}
	_start(){
		clear
		[ ! -e "$filebrowserPath" ] && _msg E "请先安装filebrowser！" && _enter && return 0
		path="$PREFIX/var/service/filebrowser"
		if [ ! -e "${path}" ];then
			mkdir -p ${path}/log
			# exec
			cat<<-EOF>${path}/run
			#!/data/data/com.termux/files/usr/bin/bash
			exec $filebrowserPath/filebrowser -d $filebrowserPath/filebrowser.db 
			EOF
			chmod +x ${path}/run
			# log
			cat<<-EOF>${path}/log/run
			#!/data/data/com.termux/files/usr/bin/bash
			svlogger="$PREFIX/share/termux-services/svlogger"
			exec "\${svlogger}" "\$@"
			EOF
			chmod +x ${path}/log/run
		fi
		_command "sv-enable filebrowser"
		echo -e "${GREEN}访问网址：http://127.0.0.1:1234${WHITE}"
		echo -e "${GREEN} 账号：root 密码：123456${WHITE}"
		_enter
	}
	_stop(){
		[ ! -e "$filebrowserPath" ] && _msg E "请先安装filebrowser！" && _enter && return 0
		_command "sv-disable filebrowser"
		_enter
	}
    OPTIONS=(
         "安装｜卸载filebrowser"
         "启动服务"
         "关闭服务"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→filebrowser" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _start
			;;
		3)
			_node _stop
			;;
		*)
			return 0
			;;
	esac
}
_UnblockNeteaseMusic(){
	p="$PREFIX/opt/UnblockNeteaseMusic"
	##解锁网易云
	i(){
		_checkInstall "$p"
		mkdir -p $PREFIX/opt
		cd $PREFIX/opt
		[ -z "$(command -v node)" ]&&_command "pkg i -y" "nodejs"
		[ -z "$(command -v git)" ]&&_command "pkg i -y" "git"
		_command "-clone" "git clone --depth 1" "$UNBLOCK_NETEASE_MUSIC_CLONE"
		echo -e "${GREEN}安装完成!${WHITE}"
		_enter
	}
	start(){
		clear
		[ ! -e "$p" ]&&echo -e "${YELLOW}请先安装UnblockNeteaseMusic！${WHITE}"&&_enter&&return
		path="$PREFIX/var/service/UnblockNeteaseMusic"
		if [ ! -e "${path}" ];then
			mkdir -p ${path}/log
			# exec
			cat<<-EOF>${path}/run
			#!/data/data/com.termux/files/usr/bin/bash
			node $p/app.js -p 8008 -a 127.0.0.1 
			EOF
			chmod +x ${path}/run
			# log
			cat<<-EOF>${path}/log/run
			#!/data/data/com.termux/files/usr/bin/bash
			svlogger="$PREFIX/share/termux-services/svlogger"
			exec "\${svlogger}" "\$@"
			EOF
			chmod +x ${path}/log/run
		fi
		_command "sv-enable UnblockNeteaseMusic"
		echo -e "$(
		cat <<-EOF
			●WiFi代理：设置→WiFi→选择连接的WiFi→高级设置→代理（PAC）
			    http://127.0.0.1:8008/proxy.pac
		EOF
		)"
		_msg W "日志：$PREFIX/var/log/sv/"
		_enter

	}
	stop(){
		[ ! -e "$p" ]&&echo -e "${YELLOW}请先安装UnblockNeteaseMusic！${WHITE}"&&_enter&&return
		_command "sv-disable UnblockNeteaseMusic"
		_enter
	}
	    OPTIONS=(
 	        "安装｜卸载UnblockNeteaseMusic"
	        "开启"
	        "关闭"
	        "<<返回上级目录>>")
	    _dialog "首页→其他选项→UnblockNeteaseMusic解锁网易云" "请选择" $OPTIONS
	    case $op in
	    	1)
	    		i
	    		;;
	    	2)
	    		start
	    		;;
	    	3)
	    		stop
	    		;;
	    	*)
    			return 0
    			;;
	    esac	
}
_music-dl(){
	path=$PREFIX/opt/music-dl
	i(){
		_checkInstall $path
		[ ! "$?" == "0" ] && return 0
		[ -z "$(command -v python)" ]&&_command "pkg i -y" "python"
		[ -z "$(command -v git)" ]&&_command "pkg i -y" "git"
		mkdir -p $PREFIX/opt
		cd $PREFIX/opt
		_command "-clone" "git clone --depth 1 " "$MUSIC_DL_CLONE"
		cd music-dl
		pip3 install -r requirements.txt
		_enter
	}
	start(){
		[ ! -e "$path" ] && echo -e "${YELLOW}请先安装music-dl！${WHITE}" && _enter && return
		cd $path
		_command "./music-dl --help"
		_command "./music-dl"
		_enter
	}
	    OPTIONS=(
 	        "安装｜卸载Music-dl"
	        "下载音乐"
	        "<<返回上级目录>>")
	    _dialog "首页→其他选项→全网音乐下载music-dl" "请选择" $OPTIONS
	    case $op in
	    	1)
	    		_node i
	    		;;
	    	2)
	    		start
	    		;;
	    	*)
    			return 0
  		  		;;
	    esac	
}

_vscode-server(){
	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}简介：${WHITE}基于vscode.dev的网页版vscode开发了官方的code-server
			${GREEN}官网：${WHITE}https://github.com/coder/code-server
			EOF
		)"
		# install TreeSoft
		if [ -n "$(dpkg -l | grep code-server)" ];then
			_msg W "本地已安装VScode-server"
			echo -en "${RED}是否卸载？[Y/N]${WHITE}" ""
			read op
			case $op in
			y|Y)
				pkill -9 code-server
				_command "apt purge" "code-server" "-y"
				rm -rf "$PREFIX/var/service/VScode-server"
				;;
			*)
				return 0
				;;
			esac
		fi
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		_msg W "如果网速过慢，请科学上网"
		yes | pkg update
		_command "pkg i -y" "tur-repo code-server"
		_config
		_msg I "安装完成！"
		_enter
	}
	_start(){
		clear
		[ -z "$(dpkg -l | grep code-server)"  ] && _msg E "请先安装VScode-server！" && _enter && return 0
		path="$PREFIX/var/service/VScode-server"
		if [ ! -e "${path}" ];then
			mkdir -p ${path}/log
			# exec
			cat<<-EOF>${path}/run
			#!/data/data/com.termux/files/usr/bin/bash
			code-server
			EOF
			chmod +x ${path}/run
			# log
			cat<<-EOF>${path}/log/run
			#!/data/data/com.termux/files/usr/bin/bash
			svlogger="$PREFIX/share/termux-services/svlogger"
			exec "\${svlogger}" "\$@"
			EOF
			chmod +x ${path}/log/run
		fi
		_command "sv-enable VScode-server"
		echo -e "${YELLOW}\n-------------VScode-server配置文件-------------${WHITE}"
		cat $HOME/.config/code-server/config.yaml
		echo -e "${YELLOW}---------------------------------------------------${WHITE}"
		_msg W "日志：$PREFIX/var/log/sv/"
		_enter
	}
	_stop(){
		[ -z "$(dpkg -l | grep code-server)"  ] && _msg E "请先安装VScode-server！" && _enter && return 0
		_command "sv-disable VScode-server"
		_enter
	}
	_config(){
		[ -z "$(dpkg -l | grep code-server)"  ] && _msg E "请先安装VScode-server！" && _enter && return 0
		address=$(dialog --clear --title "code-server连接地址" \
		--inputbox "输入你的地址(不填为默认值)
		([默认127.0.0.1])" 8 50 \
		3>&1 1>&2 2>&3 3>&-)
		[ -z "$address" ]&&address=127.0.0.1
		
		port=$(dialog --clear --title "code-server连接端口" \
		--inputbox "输入你的端口(不填为默认值)
		([默认8050])" 8 50 \
		3>&1 1>&2 2>&3 3>&-)
		[ -z "$port" ]&&port=8050
		
		password=$(dialog --clear --title "code-server连接密码" \
		--inputbox "输入你的密码(不填为默认值)
		([默认：无])" 8 50 \
		3>&1 1>&2 2>&3 3>&-)
		
		auth=none
		[ -n "$password" ]&&auth=password
		
		cat<<-EOF > $HOME/.config/code-server/config.yaml
		bind-addr: $address:$port
		auth: $auth
		password: $password
		cert: false
		EOF
		echo -e "${YELLOW}\n-------------code-server配置文件-------------${WHITE}"
		cat $HOME/.config/code-server/config.yaml
		echo -e "${YELLOW}---------------------------------------------------${WHITE}"
		echo -e "${GREEN}小提示：关闭后启动配置生效${WHITE}"
		_enter
	}

    OPTIONS=(
         "安装｜卸载VScode-server"
         "启动服务"
         "关闭服务"
         "修改配置文件"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→VScode-server" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _start
			;;
		3)
			_node _stop
			;;
		4)
			_node _config
			;;		
		*)
			return 0
			;;
	esac

}

_Alist(){
	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}简介：${WHITE}一款支持多种存储的目录文件列表程序，支持 web 浏览与 webdav，后端基于gin，前端使用react。
			${GREEN}官网：${WHITE}https://github.com/alist-org/alist
			EOF
		)"
		# install TreeSoft
		if [ -n "$(dpkg -l | grep alist)" ];then
			_msg W "本地已安装Alist"
			echo -en "${RED}是否卸载？[Y/N]${WHITE}" ""
			read op
			case $op in
			y|Y)
				pkill -9 alist
				_command "apt purge" "alist" "-y"
				rm -rf "$PREFIX/var/service/Alist"
				rm -rf $PREFIX/bin/data
				;;
			*)
				return 0
				;;
			esac
		fi
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		_msg W "如果网速过慢，请科学上网"
		yes | pkg update
		_command "pkg i -y" "alist"
		_msg I "安装完成！"
		_enter
	}
	_start(){
		clear
		[ -z "$(dpkg -l | grep alist)"  ] && _msg E "请先安装Alist！" && _enter && return 0
		path="$PREFIX/var/service/Alist"
		if [ ! -e "${path}" ];then
			mkdir -p ${path}/{log,data}
			# exec
			cat<<-EOF>${path}/run
			#!/data/data/com.termux/files/usr/bin/bash
			alist server --data $PREFIX/var/service/Alist/data
			EOF
			chmod +x ${path}/run
			# log
			cat<<-EOF>${path}/log/run
			#!/data/data/com.termux/files/usr/bin/bash
			svlogger="$PREFIX/share/termux-services/svlogger"
			exec "\${svlogger}" "\$@"
			EOF
			chmod +x ${path}/log/run
		fi
		_command "sv-enable Alist"
		echo -e "${YELLOW}\n-------------配置信息-------------${WHITE}"
		alist admin --data $PREFIX/var/service/Alist/data
		cat $PREFIX/var/service/Alist/data/config.json | grep port
		echo -e "${YELLOW}---------------------------------------------------${WHITE}"	
		_msg W "日志：$PREFIX/var/log/sv/"
		_enter
	}
	_stop(){
		clear
		[ -z "$(dpkg -l | grep alist)"  ] && _msg E "请先安装Alist！" && _enter && return 0
		_command "sv-disable Alist"
		_enter
	}
	OPTIONS=(
         "安装｜卸载Alist"
         "启动服务"
         "关闭服务"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→Alist" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _start
			;;
		3)
			_node _stop
			;;
		*)
			return 0
			;;
	esac
}



_vimIDE(){
	coc(){
		mkdir -p ~/.vim/{autoload,plugged}  ~/.config/coc/extensions/coc-java-data/server/
		download " -c https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim -O $HOME/.vim/autoload/plug.vim"
		cd ~/.vim/plugged
		## 安装coc扩展
		git clone --branch release https://github.com/neoclide/coc.nvim
		download "wget -c https://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz -O ./jdt.tar.gz"
		#将jdt.ls的包解压到这个目录下  
		tar -xzvf jdt.tar.gz -C ~/.config/coc/extensions/coc-java-data/server/
		rm -rf .git jdt.tar.gz
		cat<<-EOF>~/.vimrc
		call plug#begin('~/.vim/plugged') "插件配置目录
		Plug 'neoclide/coc.nvim', {'branch': 'release'} " coc插件管理
		Plug 'honza/vim-snippets' " 提供强大的代码块
		Plug 'yianwillis/vimcdoc' " 中文文档（vimcdoc）
		Plug 'altercation/vim-colors-solarized' " 主题（vim-colors-solarized）
		Plug 'scrooloose/nerdtree' " 目录树(NERDTree)
		Plug 'preservim/tagbar' " 标签导航（Tagbar）
		Plug 'vim-scripts/taglist.vim' " 标签列表(taglist.vim)
		Plug 'vim-airline/vim-airline' " 状态栏优化（vim-airline）
		Plug 'scrooloose/nerdcomm_enter' " 批量注释（nerdcomm_enter）
		Plug 'Yggdroot/indentLine'
		call plug#end()
		EOF
		
		echo -e "${YELLOW}预安装Java、C/C++、Python、Go、Web、MySQL、bash、vimscript开发插件${WHITE}"
		echo -e "${YELLOW}若安装失败（出现红色×），请手动执行 vim -c :PlugInstall 或尝试输入 R 重新下载${WHITE}"
		echo -e "${GREEN}更多插件请访问https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions${WHITE}"
		_enter
		# 配合neocomplete
		#vim -c :"CocInstall coc-java coc-snippets coc-clangd coc-python coc-go coc-html coc-emmet coc-tsserver coc-css coc-sql coc-sh coc-vimlsp " a
		vim -c :PlugInstall
	}
	ycm(){
		cat<<-EOF>~/.vimrc
		call plug#begin('~/.vim/plugged') "插件配置目录
		Plug 'valloric/YouCompleteMe'
		call plug#end()
		EOF
		vim -c :PluginInstall
		cd 
		
		##如果想补全各种语言，则选择完全安装：
		##python3 install.py --all
		##如果只想补全指定语言，则需要指定对应语言的安装方式，如补全C++：
		##python3 install.py --clangd-completer
		##或补全C#：
		##python3 install.py --cs-completer
		##或补全Java：
		##python3 install.py --java-completer
		##或补全Go：
		##python3 install.py --go-completer
	}
	main(){
	    OPTIONS=(
	         "vim-plug+coc代码补全"
	         "vim-plug+ycm代码补全"
	         "<<返回上级目录>>")
 	   _dialog "首页→其他选项→Vim IDE" "请选择" $OPTIONS
	    case $op in
    		1)
    			coc
    			;;
    		2)
    			ycm
    			;;
    		*)
    			return
    			;;
    	esac

	}
	_check "git" "wget" 
	main
}

_nvimIDE(){
	_i(){
		clear
		echo -e "$(
			cat <<-EOF
			\n\n｀｀｀｀｀｀｀｀｀${YELLOW} neovim IDE 配置方案 ${WHITE}｀｀｀｀｀｀｀｀｀
			--${GREEN}软件${WHITE}
			    nvim
			--${GREEN}基本插件${WHITE}
			    ●wbthomason/packer.nvim 插件包管理器
			    ●folke/tokyonight.nvim  主题
			    ●nvim-lualine/lualine.nvim  底部状态栏
			    ●kyazdani42/nvim-web-devicons  提供特殊图标字体支持
			    ●nvim-tree/nvim-tree.lua   文档树
			    ●nvim-tree/nvim-web-devicons tree特殊图标字体支持
			    ●nvim-treesitter/nvim-treesitter  根据代码进行语法颜色区分
			    ●p00f/nvim-ts-rainbow  不同的方法和类，括号用不同的颜色区分
			    ●akinsho/toggleterm.nvim  浮动终端
			    ●glepnir/dashboard-nvim  启动页面
			--${GREEN}＊Java Lsp服务器${WHITE}
			    ●mfussenegger/nvim-jdtls   针对Java Lsp，用于支持eclipse.jdt.ls的扩展
			    ●williamboman/mason.nvim   lsp和dap的下载器与管理
			    ●williamboman/mason-lspconfig.nvim  连接mason.nvim与nvim-lspconfig的中间插件
			    ●neovim/nvim-lspconfig   lsp客户端（x移弃）
			    ●folke/lsp-colors.nvim  为lsp客户端设置配色方案
			    ●glepnir/lspsaga.nvim  轻量级Lsp插件，具有高性能UI，功能非常强（显示类、方法信息，根据代码创建大纲，灯泡💡提示，浮动终端等等）
			    ●hrsh7th/cmp-nvim-lsp-signature-help   Lsp插件，功能:提示方法，函数的参数需要
			    ●j-hui/fidget.nvim  jdtls右下角信息提示
			--${GREEN}代码补全${WHITE}
			    ●hrsh7th/nvim-cmp   代码补全核心插件
			    ●hrsh7th/cmp-nvim-lsp  根据lsp服务器进行补全提示
			    ●hrsh7th/cmp-cmdline  nvim命令行模式提示
			    ●f3fora/cmp-spell  英语单词拼写辅助
			    ●hrsh7th/cmp-path  路径补全支持
			    ●hrsh7th/cmp-buffer  nvim-cmp的缓冲词来源
			    ●windwp/nvim-autopairs  自动补全括号（输入左括号，光标移动到中间，输入右括号，跳出括号）
			    ●tzachar/cmp-tabnine  AI补全（暂时没有全部支持aarch64）
			    ●L3MON4D3/LuaSnip   代码块
			    ●saadparwaiz1/cmp_luasnip  代码块支持For luasnip users.
			    ●rafamadriz/friendly-snippets   代码块
			    ●jose-elias-alvarez/null-ls.nvim  代码格式化
			--${GREEN}＊dap代码调试${WHITE}
			    ●mfussenegger/nvim-dap  代码调试debug
			    ●rcarriga/cmp-dap  代码调试
			    ●rcarriga/nvim-dap-ui  调试页面支持
			    ●theHamsta/nvim-dap-virtual-text   此插件为 nvim-dap 添加了虚拟文本支持
			--${GREEN}其他部分插件${WHITE}
			    ●folke/which-key.nvim  快捷键提示
			    ●numToStr/Comment.nvim  自动注释代码
			    ●akinsho/bufferline.nvim  顶部显示buffer缓冲区
			    ●lewis6991/gitsigns.nvim  左则Git提示
			    ●nvim-telescope/telescope.nvim  高度可扩展的模糊查找器
			    ●nvim-lua/plenary.nvim  telescope.nvim必须的依赖插件
			    ●chentoast/marks.nvim  一个行标记
			    ●#norcalli/nvim-colorizer   高性能的高亮插件(暂时考虑可用性)
			    ●JuanZoran/Trans.nvim   英文翻译（单词包128M解压≈1.2G）
			    ●kkharji/sqlite.lua  翻译数据库依赖
			EOF
		)"
		_enter
		_msg W "当前源已切换到外国语学院"
		mkdir -p $HOME/{.vim/dict,.config}
		cat<<-EOF>"/data/data/com.termux/files/usr/etc/apt/sources.list"  ##北京外国语
			# The main termux repository, behind cloudflare cache:
			# deb https://packages-cf.termux.dev/apt/termux-main/ stable main
			# The main termux repository:
			#deb https://packages.termux.dev/apt/termux-main/ stable main
			deb https://mirrors.bfsu.edu.cn/termux/apt/termux-main stable main
		EOF

		yes | pkg update
		_command "pkg i " "tar zip neovim git zig python nodejs openjdk-17* wget stylua maven gradle lua53 ripgrep termux-api clang lua-language-server php apache2 nginx php-fpm php-apache yarn graphviz tree golang composer" " -y"
		_command "npm install -g " " eslint clangd bash-language-server vscode-langservers-extracted typescript typescript-language-server"
		_command "pip install "  " black spell autopep8 prettier flake8 debugpy ptvsd neovim"
		
		##下载nvim配置
		cd $HOME/.config
		_command "-raw" "wget -c" "$NVIM_ZIP_RAW"
		_command "-raw" "wget -c" "$FONT_TAR_XZ_RAW"
		unzip -o nvim.zip
		xz -d font.tar.xz
		tar -xvf font.tar
		mv font.ttf $HOME/.termux
		rm -rf nvim.zip font.tar
		
		##从github下载插件
		_msg I "请确保你的网络能够访问到 http://github.com ！"
		_enter
		
		##下载jdk11
		if [  ! -e "$PREFIX/opt/openjdk-11.0.12" ];then
			cd $PREFIX/opt
			_command "-release" "wget -c" "$JDK11_ZIP_RELEASE"
			unzip -o openjdk-11.0.12-aarch64.zip
			rm -rf openjdk-11.0.12-aarch64.zip
		fi
		
		##下载离线单词包 
		if test -e "$HOME/.vim/dict/ultimate.db"; then
		    _msg W "单词库已存在跳过下载！"
		else
			cd $HOME/.vim/dict
			_command "-release" "wget -c" "$DICT_ZIP_RELEASE" "-O dict.zip"
			unzip dict.zip 
			rm -rf dict.zip
		fi
		echo "extra-keys = [['ESC','/','-','HOME','UP','END','KEYBOARD'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','SHIFT']] " > $HOME/.termux/termux.properties
		
		_msg W "全屏模式会屏蔽手机状态栏，并且在某些设备上有bug，不一定会成功"
		_enter
	    OPTIONS=(
         "需要沉浸模式"
         "不需要")
		_dialog "请问是否需要使用全屏模式？" "请问是否需要使用全屏模式？\n请选择" $OPTIONS
		case $op in
			1)
				echo "fullscreen=true" >> $HOME/.termux/termux.properties
				_msg W "如果在你的设备上全屏模式有bug，请访问wiki: https://wiki.termux.com/wiki/Terminal_Settings"
				_msg W "或者取消全屏模式：打开 ~/.termux/termux.properties 删除 fullscreen=true 后，使用命令 termux-reload-settings"
				;;
		esac
		_msg I "配置生效ing…… "
		_command "termux-reload-settings"
   		_msg W "请给termux权限！"
		_enter
		_command "termux-wake-lock"
		_enter
		_command "termux-setup-storage"
		_enter
		echo -e "${GREEN} 隐藏termux底部额外键： ${RED}按手机音量键+ 再按 k 键${GREEN}（真正全屏！）${WHITE}"
		echo -e "${GREEN} 如果下载失败，请多执行安装几次，确保插件全部安装完毕。${WHITE}"
		echo -e "${GREEN} neovim IDE已准备就绪！请打开它吧。${WHITE}"
		_enter;_enter
	}
	_d(){
		_msg W "你确定要卸载吗？［回车两次卸载］"
		_enter;_enter
		_command "pkg remove" "neovim" "-y"
		_command "rm -rf" "$HOME/.config/nvim $HOME/.local/share/nvim "
		_command "rm -rf" "$HOME/.vim/dict/ultimate.db $PREFIX/opt/openjdk-11.0.12"
		_msg I "neovim IDE卸载完毕！"
		_enter
	}
	_ud(){
		[ ! -e "$HOME/.config/nvim" ] && _msg W "请先安装nvim IDE！" && return 0
		_msg I "测试网络连通性……"
		ping -c 3 gitee.com >/dev/null 2>&1 
		[  "$?" != "0" ] && _msg E "无法访问到Gitee，请检查网络" && return 0
		_msg I "网络连接成功！"
		[ -z "$(command -v wget)" ] && _command "pkg i -y" "wget"
		_msg W "注意！此操作会备份原配置，然后换上新配置配置！"
		_msg W "并且请确保你的网络能够访问到 http://github.com ！"
		_enter
		cd $HOME/.config
		zip -r nvim.bak.zip nvim
		rm -rf nvim
		_msg W "打包旧配置为$HOME/.config/nvim.bak.zip"
		_enter
		_command "-raw" "wget -c" "$NVIM_ZIP_RAW"	
		_command "-raw" "wget -c" "$FONT_TAR_XZ_RAW"		
		unzip -o nvim.zip
		xz -d font.tar.xz
		tar -xvf font.tar
		mv font.ttf $HOME/.termux
		rm -rf nvim.zip font.tar
		sleep 1
		_msg I "更换nvim需要的字体支持（上百款字体可用访问：https://www.nerdfonts.com下载）"
		_enter
		echo "extra-keys = [['ESC','/','-','HOME','UP','END','KEYBOARD'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','SHIFT']] " > $HOME/.termux/termux.properties
		_msg W "全屏模式会屏蔽手机状态栏，并且在某些设备上有bug，不一定会成功"
		_enter
		
	    OPTIONS=(
         "需要沉浸模式"
         "不需要")
		_dialog "请问是否需要使用全屏模式？" "请选择" $OPTIONS
		case $op in
			1)
				echo "fullscreen=true" >> $HOME/.termux/termux.properties
				_msg W "如果在你的设备上全屏模式有bug，请访问wiki: https://wiki.termux.com/wiki/Terminal_Settings"
				_msg W "或者取消全屏模式：打开 $HOME/.termux/termux.properties 删除 fullscreen=true 后，使用命令 termux-reload-settings "
				;;
		esac
		_msg I "配置生效ing……"
		termux-reload-settings
		echo -e "${GREEN} 隐藏termux底部额外键： 手机音量键+k （真正全屏！）${WHITE}"
		echo -e "${GREEN} 如果下载失败，请多执行安装几次，确保插件全部安装完毕。${WHITE}"
		echo -e "${GREEN} neovim IDE已准备就绪！请打开它吧。${WHITE}"
		echo -e "\n${GREEN}[$(date +"%Y年%m月%d日-%H时%M分%S秒")]更新成功${WHITE}"
		_enter
	}
    OPTIONS=(
         "安装nvimIDE"
         "卸载nvimIDE"
         "更新nvimIDE配置文件"
         "<<返回上级目录>>")
   _dialog "nim IDE v0.5" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _d
			;;
		3)
			_node _ud
			;;
		*)
			return 0
			;;
	esac
}


_wikijs(){
	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}简介：${WHITE}Wiki.js 是一个基于 NodeJS 的现代、轻量级和强大的 wiki 应用程序。较适合做小团队的知识库，一方面适合管理和阅读，另一方面还能协同创作。
			${GREEN}Github：${WHITE}https://github.com/requarks/wiki
			${GREEN}使用说明书：${WHITE}https://docs.requarks.io/install/requirements
			${RED}环境要求：${WHITE}
			\t${GREEN}数据库(以下其一)：${WHITE}
			\t\t●MySQL ≥8.0
			\t\t●MariaDB ≥10.2.7
			\t\t●SQLite ≥3.9
			\t\t●MS SQL Server ≥2012  (仅供参考)
			\t${GREEN}Node.js：${WHITE}
			\t\t● 16.0.0≤ node <17.0.0  (推荐)
			EOF
		)"
		_checkInstall "$PREFIX/opt/wiki" && rm -rf "$PREFIX/var/service/wiki" || return 0
		 _command "apt purge nodejs-16 -y"
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		
		# install wiki.js
		mkdir -p "$PREFIX/opt/wiki"
		cd "$PREFIX/opt/wiki"
		_command "-release" "wget -c" "$WIKIJS_RELEASE"
		tar -zxvf wiki-js.tar.gz
		rm -rf wiki-js.tar.gz
		
		# install nodejs-16
		_command "pkg i" "openssl-1.1 c-ares libicu" "-y"
		cd $PREFIX/opt/
		rm -rf nodejs-16*
		_command "-raw" "wget -c" "$NODEJS16_RAW"
		dpkg -i nodejs-16.19.1-aarch64.deb
		rm -rf ./nodejs-16.19.1-aarch64.deb
	    # 选择数据库
	    OPTIONS=(
			"MySQL｜localhost:3306"
			"MariaDB｜localhost:3306"
			"sqlite｜localhost:3306")
		_dialog "数据库选择" "请选择数据库信息" $OPTIONS
		
		# 暂且固定为MySQL
		op=1
		# MySQL
		if [ "$op" == "1" ];then
			password=""
			while :
			do
				password=$(dialog --clear --title "请输入MySQL 用户root的密码" \
				--inputbox "输入root的密码：" 8 50 \
				3>&1 1>&2 2>&3 3>&-)
				
				clear
				mysql -uroot -p${password} -e "drop database if exists wiki;"
				mysql -uroot -p${password} -e "create database if not exists wiki;show databases;"
				if [ "$?" == "0" ];then
					mysql -uroot -p${password} -e "CREATE USER  if not exists 'wikijs'@'localhost' IDENTIFIED BY '${password}';"
					mysql -uroot -p${password} -e "GRANT ALL ON wiki.* TO 'wikijs'@'localhost';"
					_msg W "成功创建wiki数据库！"
					_msg W "User：wikijs  Password：${password}"
					_enter
					break
				else
					_msg E "创建wiki数据库失败！请检查数据库是否在运行 或 密码是否正确"
					_enter
				fi
			done
			# 配置wiki.js文件
			cd $PREFIX/opt/wiki
			cp config.sample.yml config.yml
			sed -i "s#type: postgres#type: mysql#g;s#port: 5432#port: 3306#g;s#user: wikijs#user: wikijs#g;s#pass: wikijsrocks#pass: ${password}#g" config.yml
		# MariaDB
		elif [ "$op" == "2" ];then
			echo
		# sqlite
		elif [ "$op" == "3" ];then
			echo
		fi
		_msg I "wiki.js安装成功！"
		_enter
	}
	_start(){
		clear
		[ ! -e "$PREFIX/opt/wiki"  ] && _msg E "请先安装wiki.js！" && _enter && return 0
		path="$PREFIX/var/service/wiki"
		if [ ! -e "${path}" ];then
			mkdir -p ${path}/log
			# exec
			cat<<-EOF>${path}/run
			#!/data/data/com.termux/files/usr/bin/bash
			sleep 10
			cd "$PREFIX/opt/wiki"
			exec $PREFIX/opt/nodejs-16/bin/node server
			EOF
			chmod +x ${path}/run
			# log
			cat<<-EOF>${path}/log/run
			#!/data/data/com.termux/files/usr/bin/bash
			svlogger="$PREFIX/share/termux-services/svlogger"
			exec "\${svlogger}" "\$@"
			EOF
			chmod +x ${path}/log/run
		fi
	    # 选择数据库
	    OPTIONS=(
			"MySQL｜localhost:3306"
			"MariaDB｜localhost:3306"
			"sqlite｜localhost:3306")
		_dialog "数据库选择" "请选择数据库信息" $OPTIONS
		case "$op" in
		1)
			_command "sv-enable mysqld"
			;;
		2)
			_command "sv-enable mariadbd"
			;;
		3)
			_command "sv-enable sqlite"
			;;
		esac		
		_command "sv-enable wiki"
		_msg W "网站地址：localhost:3000"
		_msg W "日志：$PREFIX/var/log/sv/"
		_enter
	}
	_stop(){
		clear
		[ ! -e "$PREFIX/opt/wiki"  ] && _msg E "请先安装wiki.js！" && _enter && return 0
		_command "sv-disable wiki"
		_enter
	}
    OPTIONS=(
         "安装｜卸载Wiki.js"
         "启动服务"
         "关闭服务"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→Wiki.js" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _start
			;;
		3)
			_node _stop
			;;
		*)
			return 0
			;;
	esac
}

_wordpress(){
	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}简介：${WHITE}WordPress是一款个人博客系统，并逐步演化成一款内容管理系统
			${GREEN}官网：${WHITE}https://cn.wordpress.org
			${RED}环境要求：${WHITE}
			\t\t●MySQL
			\t\t●PHP
			\t\t●php-fpm
			\t\t●nginx
			EOF
		)"
		_checkInstall "$PREFIX/opt/wordpress" && rm -rf $PREFIX/etc/nginx/config/wordpress.conf || return 0
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		[ -z "$(command -v php)" ] && _command "pkg i -y" "php"
		[ -z "$(command -v php-fpm)" ] && _command "pkg i -y" "php-fpm"
		[ -z "$(command -v nginx)" ] && _command "pkg i -y" "nginx"
		# install wordpress
		cd "$PREFIX/opt/"
		_command "wget -c" "$WORDPRESS" "-O wordpress.zip"
		unzip wordpress.zip
		rm -rf wordpress.zip
		
		# MySQL
		password=""
		while :
		do
			password=$(dialog --clear --title "请输入MySQL 用户root的密码" \
			--inputbox "输入root的密码：" 8 50 \
			3>&1 1>&2 2>&3 3>&-)
			
			clear
			mysql -uroot -p$password -e "create database if not exists wordpress;show databases;"
			if [ "$?" == "0" ];then
				mysql -uroot -p${password} -e "CREATE USER  if not exists 'wordpress'@'localhost' IDENTIFIED BY '${password}';"
				mysql -uroot -p${password} -e "GRANT ALL ON wordpress.* TO 'wordpress'@'localhost';"
				_msg W "成功创建wordpress数据库！"
				_msg W "User：wordpress  Password：${password}"
				_enter
				break
			else
				_msg E "创建wordpress数据库失败！请检查数据库是否在运行 或 密码是否正确"
				_enter
			fi
		done
		
		# wordpress配置
		cd $PREFIX/opt/wordpress
		cp wp-config-sample.php wp-config.php
		file=$PREFIX/opt/wordpress/wp-config.php
		sed -i "s#database_name_here#wordpress#g" $file
		sed -i "s#username_here#wordpress#g" $file
		sed -i "s#password_here#${password}#g" $file
		sed -i "s#localhost#127.0.0.1#g" $file
		
		# nginx配置
		file="$PREFIX/etc/nginx/nginx.conf"
		if [ -z "$(cat $file | grep 'include config/*.conf;')" ];then
			row=$(cat $file |grep -n } | sed -n 12p | awk -F ":" '{print $1}')
			sed -i "$(($row-1))i include config/*.conf;" $file
		fi
		mkdir -p $PREFIX/etc/nginx/config
		cat<<-EOF> $PREFIX/etc/nginx/config/wordpress.conf
			server {
			    listen       8010;
			    #listen       [::]:80;			ipv6
			    server_name  127.0.0.1;
			    location / {
			        root   $PREFIX/opt/wordpress;		# 服务1的前端文件存放的地址
			        index  index.php index.html index.htm;									# 指定默认访问的页面
			    }
			    location ~ .php/$ {
			    root  $PREFIX/opt/wordpress;
			    index  index.php index.html index.htm;
			    fastcgi_pass   unix:$PREFIX/var/run/php-fpm.sock;
			    fastcgi_index  index.php;
			    fastcgi_param  SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
			    include  fastcgi_params;
		        }
		    }
		EOF
		_msg I "wordpress安装成功！"
		_enter		
	}
	_start(){
		clear
		[ ! -e "$PREFIX/opt/wordpress" ] && _msg E "请先安装wordpress！" && _enter && return 0
		_command "sv-enable mysqld"
		_command "sv-enable php-fpm"
		_command "sv-enable nginx"
		_msg W "网站地址：localhost:8010"
		_enter
	}
	_stop(){
		clear
		[ ! -e "$PREFIX/opt/wordpress" ] && _msg E "请先安装wordpress！" && _enter && return 0
		_command "sv-disable php-fpm"
		_command "sv-disable nginx"
		_enter
	}
    OPTIONS=(
         "安装｜卸载wordpress"
         "启动服务"
         "关闭服务"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→wordpress" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _start
			;;
		3)
			_node _stop
			;;
		*)
			return 0
			;;
	esac
}

_phpMyAdmin(){
	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}简介：${WHITE}phpMyAdmin 是由 PHP 编写的用于管理 MySQL 或 MariaDB 等数据服务器的免费软件工具
			${GREEN}官网：${WHITE}https://www.phpmyadmin.net
			${RED}环境要求：${WHITE}
			\t\t●MySQL
			\t\t●PHP
			\t\t●php-fpm
			\t\t●nginx
			EOF
		)"
		_checkInstall "$PREFIX/opt/phpMyAdmin" && rm -rf $PREFIX/etc/nginx/config/phpMyAdmin.conf || return 0
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		[ -z "$(command -v php)" ] && _command "pkg i -y" "php"
		[ -z "$(command -v php-fpm)" ] && _command "pkg i -y" "php-fpm"
		[ -z "$(command -v nginx)" ] && _command "pkg i -y" "nginx"
		# install phpMyAdmin
		cd "$PREFIX/opt/"
		_command "wget -c" " https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.zip" " -O phpMyAdmin.zip"
		unzip phpMyAdmin.zip
		mv phpMyAdmin-* phpMyAdmin
		rm -rf phpMyAdmin.zip
		cd phpMyAdmin
		cp config.sample.inc.php config.inc.php
		sed -i "s#localhost#127.0.0.1#g" config.inc.php
		
		# nginx配置
		file="$PREFIX/etc/nginx/nginx.conf"
		if [ -z "$(cat $file | grep 'include config/\*.conf;')" ];then
			row=$(cat $file |grep -n } | sed -n 12p | awk -F ":" '{print $1}')
			sed -i "$(($row-1))i include config/*.conf;" $file
		fi
		mkdir -p $PREFIX/etc/nginx/config
		cat<<-EOF> $PREFIX/etc/nginx/config/phpMyAdmin.conf
			server {
			    listen       8020;
			    #listen       [::]:80;			ipv6
			    server_name  127.0.0.1;
			    location / {
			        root   $PREFIX/opt/phpMyAdmin;		# 服务1的前端文件存放的地址
			        index  index.php index.html index.htm;									# 指定默认访问的页面
			    }
			    location ~ .php$ {
			    root  $PREFIX/opt/phpMyAdmin;
			    index  index.php index.html index.htm;
			    fastcgi_pass   unix:$PREFIX/var/run/php-fpm.sock;
			    fastcgi_index  index.php;
			    fastcgi_param  SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
			    include  fastcgi_params;
		        }
		    }
		EOF

		_msg I "phpMyAdmin安装成功！"
		_enter
	}
	_start(){
		clear
		[ ! -e "$PREFIX/opt/phpMyAdmin" ] && _msg E "请先安装phpMyAdmin！" && _enter && return 0
		_command "sv-enable mysqld"
		_command "sv-enable php-fpm"
		_command "sv-enable nginx"
		_msg W "网站地址：localhost:8020"
		_enter
	}
	_stop(){
		clear
		[ ! -e "$PREFIX/opt/phpMyAdmin" ] && _msg E "请先安装phpMyAdmin！" && _enter && return 0
		_command "sv-disable php-fpm"
		_command "sv-disable nginx"
		_enter
	}
    OPTIONS=(
         "安装｜卸载phpMyAdmin"
         "启动服务"
         "关闭服务"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→phpMyAdmin" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _start
			;;
		3)
			_node _stop
			;;
		*)
			return 0
			;;
	esac
}

_TreeSoft(){
	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}简介：${WHITE}TreeSoft数据库管理系统，是使用java开发的，可以布署于window,linux,mac等操作系统。采用web方式管理数据库，一次布署，到处使用！同时支持 MySQL，Oracle，DB2，PostgreSQL，SQL Server，mongoDB，Hive，SAP HANA，Sybase，Caché ，达梦DM7，神通等异构数据库。
			${GREEN}官网：${WHITE}http://www.treesoft.cn/dms.html
			${RED}环境要求：${WHITE}
			\t\t●jdk-1.8及以上（脚本默认使用openjdk-17）
			\t\t●tomcat 9.0.0及以上
			EOF
		)"
		# install TreeSoft
		_checkInstall "$PREFIX/opt/tomcat" && _command "pkill -9 java" && rm -rf "$PREFIX/var/service/tomcat" || return 0
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0

		[ -z "$(command -v java)" ] && _command "pkg i -y" "openjdk-17"
		cd "$PREFIX/opt/"
		_command "-release" "wget -c" "$TOMCAT_RELEASE"
		unzip tomcat.zip
		rm -rf tomcat.zip
		chmod 775 $PREFIX/opt/tomcat/bin/catalina.sh
		chmod 775 $PREFIX/opt/tomcat/bin/startup.sh
		chmod 775 $PREFIX/opt/tomcat/bin/shutdown.sh
		_msg I "TreeSoft安装成功！"
		_enter
	}
	_start(){
		clear
		[ ! -e "$PREFIX/opt/tomcat"  ] && _msg E "请先安装TreeSoft！" && _enter && return 0
		path="$PREFIX/var/service/tomcat"
		if [ ! -e "${path}" ];then
			mkdir -p ${path}/log
			# exec
			cat<<-EOF>${path}/run
			#!/data/data/com.termux/files/usr/bin/bash
			if [ -z "\$(ps -ef | grep tomcat/ | grep -v grep)" ];then
			    exec $PREFIX/opt/tomcat/bin/startup.sh
			    read op
			fi
			EOF
			chmod +x ${path}/run
			# log
			cat<<-EOF>${path}/log/run
			#!/data/data/com.termux/files/usr/bin/bash
			svlogger="$PREFIX/share/termux-services/svlogger"
			exec "\${svlogger}" "\$@"
			EOF
			chmod +x ${path}/log/run
		fi
		_command "sv-enable tomcat"
		_msg W "网站地址：localhost:8085/treesoft"
		_msg I "用户名：admin"
		_msg I "地址：treesoft"
		_msg I "验证码：随便填！！"
		_msg W "日志：$PREFIX/var/log/sv/"
		_enter
	}
	_stop(){
		clear
		[ ! -e "$PREFIX/opt/tomcat"  ] && _msg E "请先安装TreeSoft！" && _enter && return 0
		_command "sv-disable tomcat"
		_enter
	}
    OPTIONS=(
         "安装｜卸载TreeSoft"
         "启动服务"
         "关闭服务"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→TreeSoft" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _start
			;;
		3)
			_node _stop
			;;
		*)
			return 0
			;;
	esac
}

_mmcd(){
		##所有设备的编码
		AllNum=(
		##
		"6381715522"
		"6381711269"
		"6381706707"
		"6384409797"
		"6384409896"
		"6381706728"
		##
		"6381706745"
		"6280501937"
		"6380500473"
		"6280501923"
		"6381701046"
		"6384409885"
		##
		"6380603292"
		"6380606290"
		"6380606289"
		"6380603243"
		"6280500021"
		"6380601933"
		"6380603266"
		##
		"6380603240"
		"6380602642"
		"6380602601"
		"6380606238"
		"6380500943"
		"6380500992"
		"6380500951"
		##
		"6381711270"
		"6381711273"
		)
		##对应编码信息
		Message=(
		##
		"D区宿舍前面斜坡A[离D区最远]"
		"D区宿舍前面斜坡B"
		"D区宿舍前面斜坡C"
		"D区宿舍前面斜坡D"
		"D区宿舍前面斜坡E"
		"D区宿舍前面斜坡F[离D区最近]"
		##
		"F区宿舍前面A[离岗门最远]"
		"F区宿舍前面B"
		"F区宿舍前面C"
		"F区宿舍前面D"
		"F区宿舍前面E"
		"F区宿舍前面F[离岗门最近]"
		##
		"B区宿舍[左侧]充电车棚A[离中央食堂最近]"
		"B区宿舍[左侧]充电车棚B"
		"B区宿舍[左侧]充电车棚C"
		"B区宿舍[左侧]充电车棚D"
		"B区宿舍[左侧]充电车棚E"
		"B区宿舍[左侧]充电车棚F"
		"B区宿舍[左侧]充电车棚G[B区宿舍左门口]"
		##
		"B区宿舍[右侧]充电车棚A[B区宿舍右门口]"
		"B区宿舍[右侧]充电车棚B"
		"B区宿舍[右侧]充电车棚C"
		"B区宿舍[右侧]充电车棚D"
		"B区宿舍[右侧]充电车棚E"
		"B区宿舍[右侧]充电车棚F"
		"B区宿舍[右侧]充电车棚G[离中央食堂最远]"
		##
		"紫荆府"
		"泰顺县香洲雅苑2018.10.18LA"
		)

		# Login headers
		Login=(
		"appVersion: 2.7.2"
		"client: android"
		"client-osVersion: 30"
		#"deviceId: CC652F2E899531A5C38DB6BEF39F750F"
		#"appId: 20171108"
		#"timestamp: 1646839690092"
		#"signature: dcb065d6b51d25f13dd8fc9ced7b3283"
		"appCommId: MCB_INSTANCE_ANDROID_APP"
		"Content-Type: application/json; charset=utf-8"
		#"Content-Length: 57"
		#"Content-Length: 62"
		#"Content-Length: 30"
		"Host: mobile.mamcharge.com"
		"Connection: Keep-Alive"
		#"Accept-Encoding: gzip"
		"User-Agent: okhttp/3.2.0"
		)

	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}声明：${WHITE}
			\t\t●仅提供学习测试，请勿用于商业用途！
			\t\t●仅提供学习测试，请勿用于商业用途！
			\t\t●仅提供学习测试，请勿用于商业用途！
			${RED}环境要求：${WHITE}
			\t\t●MySQL
			EOF
		)"
		# install mmcd
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		[ -z "$(command -v java)" ] && _command "pkg i -y" "openjdk-17"
		[ -z "$(command -v jq)" ] && _command "pkg i -y" "jq"
		[ -z "`command -v qrencode`" ] && _command "pkg i -y" "libqrencode"
		# MySQL
		password=""
		while :
		do
			password=$(dialog --clear --title "请输入MySQL 用户root的密码" \
			--inputbox "输入root的密码：" 8 50 \
			3>&1 1>&2 2>&3 3>&-)
			
			clear
			mysql -uroot -p${password} -e "drop database if exists mmcd;"
			mysql -uroot -p${password} -e "create database if not exists mmcd;show databases;"
			_enter
			if [ "$?" == "0" ];then
				# 获取手机号
				phone=$(dialog --clear --title "请输入你的手机号码" \
				--inputbox "共11位" 8 50 \
				3>&1 1>&2 2>&3 3>&-)
				random=("A" "B" "C" "D" "E" "F")
				A1=${random[$[$RANDOM%6]]} ; A2=${random[$[$RANDOM%6]]} ; A3=${random[$[$RANDOM%6]]} ; A4=${random[$[$RANDOM%6]]} ; N1=$[$RANDOM%10] ; N2=$[$RANDOM%10] ; N3=$[$RANDOM%10] ; N4=$[$RANDOM%10]
				device="${A1}${A2}652F2E${N1}99${N2}31A5C38${A3}B6B${A4}F3${N3}F75${N4}F"
				appid=20171108
				
				# 创建用户
				mysql -uroot -p${password} -e "CREATE USER  if not exists 'mmcd'@'localhost' IDENTIFIED BY '123456';"
				mysql -uroot -p${password} -e "GRANT ALL ON mmcd.* TO 'mmcd'@'localhost';"
				
				# 充电桩信息
				mysql -uroot -p${password} -e "use mmcd;create table if not exists msg(sno int(5), coding bigint(50), name varchar(100));"
				# 录入充电桩信息
				for x in $(seq 0 $((${#AllNum[@]}-1)))
				do
					mysql -ummcd -p123456 -e "use mmcd; insert into msg values($(($x+1)), ${AllNum[$x]}, \"${Message[$x]}\");"
				done

				# Login 
				mysql -uroot -p${password} -e "use mmcd;create table if not exists login(sno int(5),header varchar(200));"
				# 录入请求头
				for x in $(seq 0 $((${#Login[@]}-1)))
				do
					mysql -ummcd -p123456 -e "use mmcd; insert into login values($(($x+1)),'${Login[$x]}');"
				done

				# 用户信息
				mysql -uroot -p${password} -e "use mmcd;create table if not exists user(phone bigint(50), dev varchar(200), appid bigint(50), AppletUser varchar(200));"
				cd "$HOME/.config/td/"
				if [ ! -e "HMacMd5Utils.java" ];then
					_command "-raw" "wget -c" "$HMacMd5Utils_RAW"
				fi
				# Login 获取cookie
				url="mobile.mamcharge.com/applet/api/applet/sendSMSCaptcha"
				data="{\"nationalCode\":\"86\",\"phoneNum\":\"${phone}\",\"type\":\"1\"}"
				javac HMacMd5Utils.java
				s=$(java HMacMd5Utils $phone)
				timestamp=$(echo $s | awk '{print $1}')
				signature=$(echo $s | awk '{print $2}')
				# Content-Length=57
				H=()
				n=$(mysql -N -uroot -p${password} -e "use mmcd; select count(*) from login;")
				for x in $(seq 0 $(($n-1)))
				do
					H[$x]="$(mysql -N -uroot -p${password} -e "use mmcd; select header from login limit $x,1;")"
				done
				_msg W "请求验证码"
				curl -H "${H[0]}" -H "${H[1]}" -H "${H[2]}" -H "deviceId: $deviceId" -H "appId: $appid" -H "${H[3]}" -H "${H[4]}" -H "${H[5]}" -H "timestamp: $timestamp" -H "signature: $signature" -H "${H[6]}" -H "${H[7]}" -H "${H[8]}" -H "Content-Length: 57" -H "${H[10]}" -H "${H[11]}" -H "${H[12]}" -H "${H[13]}" -H "${H[14]}" -H "${H[15]}" -X POST -d "$data" $url
				AuthCode=$(dialog --clear --title "请输入验证码" \
				--inputbox "注意查收" 8 50 \
				3>&1 1>&2 2>&3 3>&-)
				AuthCode=$(echo $AuthCode | sed "s# ##g")
				# 获取cookie
				url="mobile.mamcharge.com/applet/api/applet/loginOrRegister"
				data="{\"code\":\"$AuthCode\",\"nationalCode\":\"86\",\"phoneNum\":\"$phone\"}"
				javac HMacMd5Utils.java
				s=$(java HMacMd5Utils $phone $AuthCode)
				timestamp=$(echo $s | awk '{print $1}')
				signature=$(echo $s | awk '{print $2}')
				_msg W "获取cookie"
				curl -H "${H[0]}" -H "${H[1]}" -H "${H[2]}" -H "deviceId: $deviceId" -H "appId: $appid" -H "${H[3]}" -H "${H[4]}" -H "${H[5]}" -H "timestamp: $timestamp" -H "signature: $signature" -H "${H[6]}" -H "${H[7]}" -H "${H[8]}" -H "Content-Length: 62" -H "${H[10]}" -H "${H[11]}" -H "${H[12]}" -H "${H[13]}" -H "${H[14]}" -H "${H[15]}" -X POST -d "$data" $url > ./cookie
				# token
				AppletUser=$(jq -r .data.token cookie)
				# 保存用户信息
				mysql -uroot -p${password} -e "use mmcd; insert into user values(${phone}, \"${device}\", $appid, \"$AppletUser\");"
				break
			else
				_msg E "创建mmcd数据库失败！请检查数据库是否在运行 或 密码是否正确"
				_enter
			fi
		done
		_msg W "用户信息"
		mysql -ummcd -p123456 -e "use mmcd; select * from user;"
		_msg W "充电桩信息"
		mysql -ummcd -p123456 -e "use mmcd; select * from msg;"
		_msg W "请求头信息"
		mysql -ummcd -p123456 -e "use mmcd; select * from login;"

		
		_msg I "猛犸充电配置成功！"
		_enter
	}
	
	_check(){
		clear
		mysql -ummcd -p123456 -e "use mmcd; select count(*) from msg;" > /dev/null
		[ ! "$?" == "0" ] && _msg E "请先配置猛犸充电" && _enter && return 0
		n=$(mysql -N -ummcd -p123456 -e "use mmcd; select count(*) from msg;")
		[ ! $n -gt 1 ] &&  _msg E "请先配置猛犸充电" && _enter && return 0
		
		mkdir -p $HOME/.cache/td
		tmp=$HOME/.cache/td/status.json
		# download HMacMd5Utils.java
		cd $HOME/.config/td
		if [ ! -e "$HOME/.config/td/HMacMd5Utils.java" ];then
			_command "-raw" "wget -c" "$HMacMd5Utils_RAW"
		fi
		# 请求头参数
		phone=$(mysql -N -ummcd -p123456 -e "use mmcd; select phone from user;")
		deviceId=$(mysql -N -ummcd -p123456 -e "use mmcd; select dev from user;")
		appid=$(mysql -N -ummcd -p123456 -e "use mmcd; select appid from user;")
		url="mobile.mamcharge.com/applet/api/startCharger/deviceDetail"	
		AppletUser=$(mysql -N -ummcd -p123456 -e "use mmcd; select AppletUser from user;")
		Token="token: $AppletUser"
		n=$(mysql -N -ummcd -p123456 -e "use mmcd; select count(*) from login;")
		for x in $(seq 0 $(($n-1)))
		do
			H[$x]="$(mysql -N -ummcd -p123456 -e "use mmcd; select header from login limit $x,1;")"
		done
		
		mysql -ummcd -p123456 -e "use mmcd; select * from msg;"
		echo -e "$(
		cat<<-EOF
		${YELLOW}输入说明${WHITE}
		\t●查询单个充电桩：6
		\t●查询多个充电桩：6 9 20 15
		\t●查询多个且连续的充电桩：5-16
		EOF
		)"
		echo -en "${YELLOW}输入要查询的充电桩(sno)：${GREEN}"
		read op
		if [ "$op" == "" ];then
			echo -e "\n${RED}你没有输入数值！${WHITE}"
			_enter
			return 0
		fi
		# 充电桩的总数
		n=$(mysql -N -ummcd -p123456 -e "use mmcd; select count(*) from msg;")
		# 判断是否是1-9这类输入
		if [[ "$(echo "$op" | grep "-" )" != "" ]];then
			first=$(echo "$op" | grep "-" | awk -F "-" '{print $1}')
			second=$(echo "$op" | grep "-" | awk -F "-" '{print $2}')
			if [ -z "$first" ] || [ -z "$second" ] || [ $first -gt $second ];then
				_msg E "你的输入有误！"
				_enter
				return 0
			fi
			op="$(seq $(echo "$op" | sed "s#-# #g"))"
		fi
		echo $op
		#1 3 6 10 79
		##判断序号是否超出范围
		for x in $op
		do
			##判断输入是否合法，是为0
			expr $x + 10 > /dev/null 2>&1
			if [ "$?" -eq "2" ] || [  "$x" -lt "1" ] || [  "$x" -gt "$n" ];then
				_msg E "你的输入有误！或超出范围！"
				_enter
				return 0
			fi
		done
		
		# 开始查询
		echo -e "\n${BLUE}请耐心等待…${WHITE}"
		for x in $op
		do
			# 请求头信息
			x=$(($x-1))
			coding=$(mysql -N -ummcd -p123456 -e "use mmcd; select coding from msg limit $x,1;")
			name=$(mysql -N -ummcd -p123456 -e "use mmcd; select name from msg limit $x,1;")
			data="{\"pno\":\"$coding\"}"
			javac HMacMd5Utils.java
			s=$(java HMacMd5Utils $coding 1 2)
			timestamp=$(echo $s | awk '{print $1}')
			signature=$(echo $s | awk '{print $2}')
			# 请求
			curl -s -H "$Token" -H "${H[0]}" -H "${H[1]}" -H "${H[2]}" -H "deviceId: $deviceId" -H "appId: $appid" -H "timestamp: $timestamp" -H "signature: $signature" -H "${H[3]}" -H "${H[4]}"  -H "Content-Length: 20" -H "${H[5]}" -H "${H[6]}" -H "${H[7]}" -H "${H[8]}" -H "${H[10]}" -H "${H[11]}" -X POST -d "$data" $url > $tmp
			# 打印
			echo -e "\t-------------${name}-------------"
			echo -e "\t\t${GREEN}充电桩编码： ${coding}${WHITE}"
			for y in $(seq 0 11)
			do
				if [ "$(jq -r .data.portList[$y].status $tmp)" == "0" ];then
					echo -e "第$(($y+1))号插头：${RED}空闲${WHITE}"
				else
					echo -e "第$(($y+1))号插头：使用中"
				fi
			done
		done
		_enter
	}
	##远程充电
	_remote_power(){
		clear
		mysql -ummcd -p123456 -e "use mmcd; select count(*) from msg;" > /dev/null
		[ ! "$?" == "0" ] && _msg E "请先配置猛犸充电" && _enter && return 0
		n=$(mysql -N -ummcd -p123456 -e "use mmcd; select count(*) from msg;")
		[ ! $n -gt 1 ] &&  _msg E "请先配置猛犸充电" && _enter && return 0
		
		mysql -ummcd -p123456 -e "use mmcd; select * from msg;"
		echo -ne "\n\n${YELLOW}请输入充电桩的编码：${GREEN}"
		read op
		op=$(echo $op | sed "s# ##g")
		status=1
		for x in $(echo $(mysql -N -ummcd -p123456 -e "use mmcd; select coding from msg;"))
		do
			if [ "$op" == "$x" ];then
				status=0
				break
			fi
		done
		if [ "$status" == "0" ];then
			echo -e "\n${GREEN}默认跳转支付宝，如果没有安装，请使用微信 / QQ / 云闪付等等扫码${WHITE}"
			am start -a android.intent.action.VIEW -d "alipays://platformapi/startapp?appId=20000067&url=www.chargerlink.com/alicp/$op"  >/dev/null 2>&1
			qrencode -l M -t UTF8 -k "http://www.chargerlink.com/alicp/$op"
		else
			echo -e "${RED}此脚本没有收录有编码为：$op的充电桩！请检查再输入${WHITE}"
		fi
		_enter
		return 0
	}


  	  OPTIONS=(
	         "配置猛犸充电"
	         "查询"
	         "远程充电"
	         "<<返回上级目录>>")
	   _dialog "首页→其他选项→猛犸充电" "请选择" $OPTIONS
	    case $op in
	   		1)
	   			_node _i
	   			;;
			2)
				_node _check
				;;
			3)
				_node _remote_power
				;;
			*)
				return 0
				;;
		esac
	}

_sql(){
	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}说明：${WHITE}即将安装的数据库有mysql，mariadb，sqlite
			EOF
		)"
		# install SQL
		if [ -n "$(dpkg -l | grep mysql)" ] || [ -n "$(dpkg -l | grep sqlite)" ];then
			_msg W "本地已安装有数据库"
			echo -en "${RED}是否卸载？[Y/N]${WHITE}" ""
			read op
			case $op in
			y|Y)
				_command "pkill mysqld"
				_command "apt purge" "mariadb sqlite" "-y"
				;;
			*)
				return 0
				;;
			esac
		fi
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		_msg W "如果网速过慢，请科学上网"
		yes | pkg update
		_command "pkg i -y" "mariadb sqlite"
		sleep 2
		##配置数据库
		_command "mysql_install_db --force"
		_msg I "安装完成！回车会重启～\n重启后再启动MySQL服务！"
		_enter
		pkill -9 $(echo $SHELL | awk -F "/" '{print $NF}')
	}
	_start(){
		clear
		[ -z "$(dpkg -l | grep mysql)"  ] && _msg E "请先安装数据库！" && _enter && return 0
		_command "sv-enable mysqld"
		_msg W "MySQL安装后默认无密码\n初始密码命令为：mysqladmin -u root password 123456"
		_msg W "MySQL：localhost:3306"
		_msg W "日志：$PREFIX/var/log/sv/"
		_enter
	}
	_stop(){
		clear
		[ -z "$(dpkg -l | grep mysql)"  ] && _msg E "请先安装数据库！" && _enter && return 0
		_command "sv-disable mysqld"
		_msg W "日志：$PREFIX/var/log/sv/"
		_enter	
	}
    OPTIONS=(
         "安装｜卸载数据库mysql,mariadb,sqlite"
         "启动服务"
         "关闭服务"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→数据库" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _start
			;;
		3)
			_node _stop
			;;
		*)
			return 0
			;;
	esac
}


_speed(){
	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}简介：${WHITE}一款简单的网速测试
			${GREEN}官网：${WHITE}https://github.com/sivel/speedtest-cli
			EOF
		)"
		# install SpeedTest
		runfile=$PREFIX/bin/speedtest-cli
		[ -z "$(command -v python)" ] && _command "pkg i -y" "python"
		if [ -e "$runfile" ];then
			_msg W "本地已安装SpeedTest"
			echo -en "${RED}是否卸载？[Y/N]${WHITE}" ""
			read op
			case $op in
			y|Y)				
				rm -rf "$runfile"
				;;
			*)
				return 0
				;;
			esac
		fi
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		_msg W "如果网速过慢，请科学上网"
		_command "-raw" "wget -O $runfile" "$SPEEDTEST_RAW"
		chmod +x $runfile
		_msg I "安装完成！"
		_enter
	}
	_run(){
		clear
		runfile=$PREFIX/bin/speedtest-cli
		 [ ! -e "$runfile" ] && _msg E "请先安装SpeedTest" && _enter && return 0
		 $runfile --bytes
		 _enter
	}
    OPTIONS=(
         "安装｜卸载SpeedTest"
         "测网速"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→SpeedTest" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _run
			;;
		*)
			return 0
			;;
	esac
}

_chatgpt_on_wechat(){
	_i(){
		_checkInstall "$PREFIX/opt/chatgpt-on-wechat" && rm -rf $PREFIX/opt/chatgpt-on-wechat || return 0
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		mkdir -p $PREFIX/opt
		cd $PREFIX/opt
		_command "git clone --depth 1" " https://github.com/zhayujie/chatgpt-on-wechat"
		cat <<-EOF> $PREFIX/opt/chatgpt-on-wechat/config.json
		{
		  "open_ai_api_key": "ChatGPT api",
		  "model": "gpt-3.5-turbo",
		  "proxy": "",
		  "use_azure_chatgpt": false,
		  "single_chat_prefix": ["bot", "@bot"],
		  "single_chat_reply_prefix": "[bot] ",
		  "group_chat_prefix": ["@bot"],
		  "group_name_white_list": ["ChatGPT测试群", "ChatGPT测试群2"],
		  "group_chat_in_one_session": ["ChatGPT测试群"],
		  "image_create_prefix": ["画", "看", "找"],
		  "speech_recognition": false,
		  "voice_reply_voice": false,
		  "conversation_max_tokens": 1000,
		  "expires_in_seconds": 3600,
		  "character_desc": "你是ChatGPT, 一个由OpenAI训练的大型语言模型, 你旨在回答并解决人们的任何问题，并且可以使用多种语言与人交流。"
		}
		EOF
		_command "pip3 uninstall" "itchat-uos" "-y"
		_command "pip3 install" "itchat-uos==1.5.0.dev0"
		_command "pip3 install --upgrade" "openai"
		loginpy="$(pip3 show itchat-uos | grep Location | awk '{print $2}')/itchat/components/login.py"
		row=$(cat $loginpy | grep -n 'isLoggedIn = False' | awk -F ":" '{print $1}')
		if [ -z "$(sed -n "$(($row+1))"p $loginpy | grep time)" ];then
			sed -i "$row{s/$/\n        time.sleep(30)/}" $loginpy
		fi
		
		echo -e "${YELLOW}拉取成功！${WHITE}"
		_enter
	}
	_run(){
		[ ! -e "$PREFIX/opt/chatgpt-on-wechat" ] && _msg E "请先拉取项目！" && _enter && return 0
		p=$(ps -ef | grep "python3 app.py" | grep -v grep | awk '{print $2}')
		kill -9 $p >/dev/null 2>&1
		echo -e "${YELLOW}你的配置文件信息如下：${WHITE}"
		echo -e "${YELLOW}配置文件路径：$PREFIX/opt/chatgpt-on-wechat/config.json${WHITE}"
		cat $PREFIX/opt/chatgpt-on-wechat/config.json
		
		_enter
		rm -rf $PREFIX/opt/chatgpt-on-wechat/nohup.out
		cd $PREFIX/opt/chatgpt-on-wechat
		
		
		out=$HOME/.cache/chatgpt
		mkdir -p $out
		PID=$out/pid
		out=$out/nohup.out
		
		cat <<-EOF> $PREFIX/opt/chatgpt-on-wechat/run.sh
			cd $PREFIX/opt/chatgpt-on-wechat
			echo "\$\$" > $PID
			python3 $PREFIX/opt/chatgpt-on-wechat/app.py
		EOF
		nohup echo $$ > $PID && python3 $PREFIX/opt/chatgpt-on-wechat/app.py > $out  &
		
		sleep 3
		while :
		do
			cat $out
			echo -e "${RED}5s 刷新一次控制台日志 PID：$(cat $PID)${WHITE}"
			echo -e "${RED}日志文件目录：$out${WHITE}"
			echo -e "${RED}可以 Ctrl + c 结束脚本，但不影响ChatGPT运行${WHITE}"
			for x in $(seq 1 5)
			do
				echo -e "${YELLOW}$x${WHITE}"
				sleep 1
			done
		done
		_enter
	}
	_stop(){
		[ ! -e "$PREFIX/opt/chatgpt-on-wechat" ] && _msg E "请先拉取项目！" && _enter && return 0
		p=$(ps -ef | grep "python3 $PREFIX/opt/chatgpt-on-wechat/app.py" | grep -v grep | awk '{print $2}')
		_command "kill -9 $p "
		_enter
	}
    OPTIONS=(
         "安装｜卸载chatgpt-on-wechat"
         "启动"
         "停止"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→chatgpt-on-wechat" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _run
			;;
		3)
			_node _stop
			;;
		*)
			return 0
			;;
	esac
	
}

_ftpd(){
	_run(){
		_command "sv-enable ftpd"
        _command "sv up ftpd"
		echo -e "$(
			cat<<-EOF
			${GREEN}ftp连接信息：：${WHITE}
			    ${RED}用户名：${WHITE}   $(whoami)
			    ${RED}密码：${WHITE}   可以使用passwd命令，修改密码（默认无密码）
			    ${RED}地址：${WHITE}   0.0.0.0
			    ${RED}端口：${WHITE}   8021
			EOF
		)"
        _enter
    }
    _stop(){
		_command "sv-disable ftpd"
        _command "sv down ftpd"
        _enter
    }
    OPTIONS=(
         "启动ftpd"
         "停止ftpd"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→ftpd" "请选择" $OPTIONS
    case $op in
		1)
			_node _run
			;;
		2)
			_node _stop
			;;
		*)
			return 0
			;;
	esac
}

# CPU跑分
_benchmarking(){
    echo -e  "${BLUE}[*]${GREEN}bash <(curl -s 'https://raw.githubusercontent.com/masonr/yet-another-bench-script/master/yabs.sh')${WHITE}"
    bash <(curl -s "https://raw.githubusercontent.com/masonr/yet-another-bench-script/master/yabs.sh")
    _enter
}

# aria2
_aria2(){
	_i(){
		clear
		echo -e "$(
			cat<<-EOF
			${GREEN}简介：${WHITE}aria2是一款开源的C++编写的命令行下载器。
			${GREEN}官网：${WHITE}https://github.com/P3TERX/aria2.conf
			${RED}环境要求：${WHITE}
			\t\t●aria2
			\t\t●nginx
			EOF
		)"
		_checkInstall "$PREFIX/opt/aria2" && rm -rf $PREFIX/etc/nginx/config/aria2.conf || return 0
		echo -en "${RED}是否继续安装？[Y/N]${WHITE}" ""
		read op
		[[ ! "$op" == "y" && ! "$op" == "Y" ]] && return 0
		[ -z "$(command -v aria2c)" ] && _command "pkg i -y" "aria2"
		[ -z "$(command -v nginx)" ] && _command "pkg i -y" "nginx"
		# install aria2.conf
		mkdir -p "$PREFIX/opt/"
		cd "$PREFIX/opt/"
		_command "git clone --depth 1" "https://github.com/P3TERX/aria2.conf" "$PREFIX/opt/aria2"
		cd aria2
		touch aria2.session
		# 修改配置
		sed -i "s#$(cat $PREFIX/opt/aria2/aria2.conf | grep 'dir=')#dir=$HOME/storage/shared/Download/#g" aria2.conf
		sed -i "s#$(cat $PREFIX/opt/aria2/aria2.conf | grep 'input-file=')#input-file=$PREFIX/opt/aria2/aria2.session#g" aria2.conf
		sed -i "s#$(cat $PREFIX/opt/aria2/aria2.conf | grep 'save-session=')#save-session=$PREFIX/opt/aria2/aria2.session#g" aria2.conf
		sed -i "s#$(cat $PREFIX/opt/aria2/aria2.conf | grep 'rpc-secret=')#rpc-secret=threedays#g" aria2.conf

		# nginx配置
		file="$PREFIX/etc/nginx/nginx.conf"
		if [ -z "$(cat $file | grep 'include config/\*.conf;')" ];then
			row=$(cat $file |grep -n } | sed -n 12p | awk -F ":" '{print $1}')
			sed -i "$(($row-1))i include config/*.conf;" $file
		fi
		mkdir -p $PREFIX/etc/nginx/config
		cat<<-EOF> $PREFIX/etc/nginx/config/aria2.conf
			server {
			    listen       2020;
			    #listen       [::]:80;			ipv6
			    server_name  localhost;
			    location / {
			        root   $PREFIX/opt/aria2;		# 服务1的前端文件存放的地址
			        index  index.html index.htm;									# 指定默认访问的页面
			    }
		    }
		EOF

		_msg I "aria2安装成功！"
		_enter
	}
	_start(){
		clear
		[ ! -e "$PREFIX/opt/aria2" ] && _msg E "请先安装aria2！" && _enter && return 0
		path="$PREFIX/var/service/aria2"
		if [ ! -e "${path}" ];then
			mkdir -p ${path}/log
			# exec
			cat<<-EOF>${path}/run
			#!/data/data/com.termux/files/usr/bin/bash
			cd "$HOME"
			exec aria2c --conf-path=$PREFIX/opt/aria2/aria2.conf
			EOF
			chmod +x ${path}/run
			# log
			cat<<-EOF>${path}/log/run
			#!/data/data/com.termux/files/usr/bin/bash
			svlogger="$PREFIX/share/termux-services/svlogger"
			exec "\${svlogger}" "\$@"
			EOF
			chmod +x ${path}/log/run
		fi
		_command "sv-enable aria2"
		_command "sv-enable nginx"
		_msg W "aria2默认下载路径：$HOME/storage/shared/Download"
		_enter
	}
	_stop(){
		clear
		[ ! -e "$PREFIX/opt/aria2" ] && _msg E "请先安装aria2！" && _enter && return 0
		_command "sv-disable aria2"
		_command "sv-disable nginx"
		_enter
	}
	_open_settings(){
		clear
		[ ! -e "$PREFIX/opt/aria2" ] && _msg E "请先安装aria2！" && _enter && return 0
		password=$(cat $PREFIX/opt/aria2/aria2.conf | grep 'rpc-secret' | awk -F "=" '{print $2}')
		
		# xdg-open 或 termux-open
		termux-open http://localhost:2020/#!/settings/rpc/set/ws/127.0.0.1/6800/jsonrpc/$(echo -n "$password" | base64)
        _enter
	}
    OPTIONS=(
         "安装｜卸载aria2-web-GUI"
         "打开aria2控制面板"
         "启动服务"
         "关闭服务"
         "<<返回上级目录>>")
   _dialog "首页→其他选项→aria2" "请选择" $OPTIONS
    case $op in
   		1)
   			_node _i
   			;;
		2)
			_node _open_settings
			;;
		3)
			_node _start
			;;
		4)
			_node _stop
			;;
		*)
			return 0
			;;
	esac
}

# main
_otherOP(){
    OPTIONS=(
         "VScode-server"
         "Alist"
         "nvimIDE"
         "filebrowser文件管理器"
         "猛犸充电"
         "解锁网易云灰色歌曲"
         "音乐下载器music-dl"
         "Wiki.js"
         "wordpress"
         "phpMyAdmin"
         "TreeSoft"
         "数据库"
         "SpeedTest网络测速"
         "chatgpt-on-wechat"
         "ftpd"
         "termux性能跑分"
         "aria2-web-GUI"
         "<<返回上级目录>>"
         "退出脚本")
    _dialog "首页→其他选项" "请选择" $OPTIONS
    case $op in
    	1)
    		_node _vscode-server
    		;;
    	2)
    		_node _Alist
    		;;
    	3)
    		_node _nvimIDE
    		;;
    	4)
    		_node _filebrowser
    		;;
    	5)
    		_node _mmcd
    		;;
    	6)
    		_node _UnblockNeteaseMusic
    		;;
    	7)
    		_node _music-dl
    		;;
    	8)
    		_node _wikijs
    		;;
    	9)
    		_node _wordpress
    		;;
    	10)
    		_node _phpMyAdmin
    		;;
    	11)
    		_node _TreeSoft
    		;;    	
    	12)
    		_node _sql
    		;;    	
    	13)
    		_node _speed
    		;;    	
    	14)
    		_node _chatgpt_on_wechat
    		;;    	
    	15)
    		_node _ftpd
    		;;
    	16)
    		_benchmarking
    		;;
    	17)
    		_node _aria2
    		;;    		
    	18)
    		return 0
    		;;
    	*)
    		exit
    		;;
    esac
}


