#!/usr/bin/env bash
# colors 颜色
if [ "$TERM" == "xterm-256color" ];then
	RED="\e[31;1m"      #红
	GREEN="\e[32;1m"   #绿
	YELLOW="\e[33;1m"  #黄
	BLUE="\e[34;1m"    #蓝
	PURPLE="\e[35;1m"    #紫红
	CYANINE="\e[36;1m"    #青蓝
	WHITE="\e[0m"       ##白色
else
	RED=""
	GREEN=""
	YELLOW=""
	BLUE=""
	PURPLE=""
	CYANINE=""
	WHITE=""
fi

# some constant var
THREEDAYS_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/ThreeDays"
TERMUX_AARCH64_TD_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/td"
CONFIG="$HOME/.config/td/ThreeDays"
VERSION_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/version"
# github speed up
CLONE_SPEED_UP_LINK=("https://gitclone.com/" "https://ghproxy.com/" )
RELEASE_SPEED_UP_LINK=("https://kgithub.com/" "https://ghproxy.com/")
RAW_SPEED_UP_LINK=("raw.gitfast.tk") # "raw.fastgit.org" https://ghproxy.com/

#  Github国内镜像网站
_github_mirror_speed_up(){
	# args：$1 $2
	# $((RANDOM%3)) -> [0,3)
	case $1 in
	clone)
		n=${#CLONE_SPEED_UP_LINK[@]}
		r=$((RANDOM%n))
		if [ $r -eq 0 ];then
			url="${CLONE_SPEED_UP_LINK[0]}"
			url=$(echo $2 | sed "s#https://#$url#g")
		elif [ $r -eq 1 ];then
			url="${CLONE_SPEED_UP_LINK[1]}${2}"
		fi
		;;
	release)
		n=${#RELEASE_SPEED_UP_LINK[@]}
		r=$((RANDOM%n))
		if [ $r -eq 0 ];then
			url="${RELEASE_SPEED_UP_LINK[0]}${2}"
		elif [ $r -eq 1 ];then
			url="${RELEASE_SPEED_UP_LINK[1]}${2}"
		fi
		;;
	raw)
		n=${#RAW_SPEED_UP_LINK[@]}
		r=$((RANDOM%n))
		#echo $((RANDOM%1))
		if [ $r -eq 0 ];then
			url="${RAW_SPEED_UP_LINK[0]}"
			url=$(awk -F "/" "{\$3 = \"$url\" ; print \$0}" OFS="/" <<<${2})
		elif [ $r -eq 1 ];then
			url="${RAW_SPEED_UP_LINK[1]}"
			url=$(awk -F "/" "{\$3 = \"$url\" ; print \$0}" OFS="/" <<<${2})
		fi
		;;
	esac
}

# some function
_enter() { echo -en "\n${GREEN}Press Enter to continue${WHITE}";read op ;:;}
# 自定义通告颜色 
_msg() {
	# I：消息
	# W：警告
	# E：错误
	case $1 in
	I)
		echo -e "\n${GREEN}I：$2${WHITE}"
		;;
	W)
		echo -e "\n${YELLOW}W：$2${WHITE}"
		;;
	E)
		echo -e "\n${RED}E：$2${WHITE}"
		;;
	esac 
}

# 栈模拟，菜单多级控制
export stack=()
_node(){
		#echo "------$*------"
		stack[${#stack[@]}]="$*"
		while :
		do
			# exec
			while :
			do
			[ "$((${#stack[@]}-1))" == "-1" ] && exit
				${stack[$((${#stack[@]}-1))]}
				case $? in
				0)
					#echo "取消前${stack[*]}"
					unset stack[$((${#stack[@]}-1))]
					#echo "取消后${stack[*]}"
					#_enter
					break
					;;
				255)
					#echo "取消前${stack[*]}"
					unset stack[$((${#stack[@]}-1))]
					unset stack[$((${#stack[@]}-2))]
					#echo "取消后${stack[*]}"
					#_enter
					break					
					;;
				esac
			done		
		done
}

_checkInstall(){
	Path="$1"
	if [ -e "$Path" ];then
		_msg W "检测到本地已安装"
		echo -en "${RED}是否需要卸载[Y/N]${WHITE}" ""
		read op
		case $op in
			y|Y)
				echo -en "${RED}回车两次即可卸载！${WHITE}" ""
				_enter;_enter
				 rm -rf $Path
	   				_msg W "移除完成！"
	   				_enter
	   				return 0
				;;
			*)
				return -1
				;;
		esac
	fi
	return 0
}


# exec command
_command(){
	# args：$1 $2 $3
	case $# in
	1)
		echo -e "\n${BLUE}[*]$white${GREEN}$1${WHITE}"
		command $1
		;;
	*)
		n=0
		for x in $2
		do
			while :
			do
				echo -e "\n${BLUE}[*]$white${GREEN}$1 $x $3 ${RED}(无情计数器：$n )${WHITE}"
				command="$1 $x $3"
				command $command
				if [ "$?" == "0" ];then
					let n++
					break
				else
					echo -e "\n${RED}Erro：Failed，please try again！${WHITE}"
					_enter
				fi
			done
		done		
		;;
	esac
	
}

# dialog
_dialog(){
	export PORT=1
	
	dialog --clear \
		--backtitle "$1" \
		--title "@参(•̀⌄•́)芜湖起飞" \
	 	--nocancel \
	 	--menu "$2" 20 40 8 \
		"${OPTIONS[@]}" \
	 	2>$HOME/menu
	 	
	export op=`cat $HOME/menu`
}
# main
_main(){
	OPTIONS=(
         1 "终端美化"
         2 "更换源sources.list"
         3 "更新脚本"
         4 "其他选项"
         5 "退出脚本")
    
    _dialog "首页" "使用↑↓选择，也可以用手点击选项再回车哦" $OPTIONS
    case $op in 
    	1)
			_node  _style

			;;
    	2)
			_node  _sources

			;;
    	3)
			_node  _update

			;;
    	4)
			_node _otherOP

			;;
    	5)
    	    clear
    	    return 0
			;;
    esac
}


# shell begin
if [ ! -e "$CONFIG" ] || [ "$(cat $CONFIG | wc -l)" == "0" ];then
	mkdir -p $HOME/.config/td
	_github_mirror_speed_up raw $THREEDAYS_RAW
	_command "wget -c" "$url" "-O $CONFIG"
	[ -z "$(command -v dialog)" ] && _command "pkg i -y" "dialog"
	if [ -z "$(dpkg -l | grep termux-api)" ];then
		_command "pkg i -y" "termux-api"
		_msg W "打开手机设置→应用权限→Termux系列，给存储权限+通知权限+自启动"
		_enter
	fi
	[ -z "$(dpkg -l | grep termux-services)" ] && _command "pkg i -y" "termux-services"
	[ ! -e "$HOME/storage" ] && _command "termux-setup-storage" 
	mkdir -p $HOME/.cache/td
	_github_mirror_speed_up raw $VERSION_RAW
	_command "wget -c" "$url" "-O $HOME/.cache/td/version"
fi
source $CONFIG
# auto update
{
	_github_mirror_speed_up raw $VERSION_RAW
	# 获取版本信息
	for x in $(seq 0 5)
	do
		curl -s $url > $HOME/.cache/td/v 2>&1 && status=0 && break
	done
	if [ $status ];then
		new_version=($(cat $HOME/.cache/td/v | sed "s#.# #g"))
		old_version=($(cat $HOME/.cache/td/version | sed "s#.# #g"))
		for x in $(seq 0 2)
		do
			[ ${new_version[$x]} -gt ${old_version[$x]} ] && termux-toast -c red -s "td脚本有更新"
		done
	fi
}&

_node _main
