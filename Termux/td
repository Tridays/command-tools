#!/usr/bin/env bash
# colors 颜色
if [ "$TERM" == "xterm-256color" ];then
	RED="\e[31;1m"      #红
	GREEN="\e[32;1m"   #绿
	YELLOW="\e[33;1m"  #黄
	BLUE="\e[34;1m"    #蓝
	PURPLE="\e[35;1m"    #紫红
	CYANINE="\e[36;1m"    #青蓝
	WHITE="\e[0m"       ##白色
else
	RED=""
	GREEN=""
	YELLOW=""
	BLUE=""
	PURPLE=""
	CYANINE=""
	WHITE=""
fi

# some constant var
THREEDAYS_RAW="https://raw.gitfast.tk/Tridays/command-tools/main/Termux/ThreeDays"
GUI_RAW="https://raw.gitfast.tk/Tridays/command-tools/main/Termux/GUI"
TERMUX_AARCH64_TD_RAW="https://raw.gitfast.tk/Tridays/command-tools/main/Termux/td"
VERSION_RAW="https://raw.gitfast.tk/Tridays/command-tools/main/Termux/version"
ThreeDays="$HOME/.config/td/ThreeDays"
GUI="$HOME/.config/td/GUI"
TERMUX_X11_RAW="https://raw.githubusercontent.com/Tridays/command-tools/main/Termux/termux-x11/termux-x11.deb"

# github speed up
CLONE_SPEED_UP_LINK=("https://gitclone.com/" "https://ghproxy.com/" )
RELEASE_SPEED_UP_LINK=("https://kgithub.com/" "https://ghproxy.com/")
RAW_SPEED_UP_LINK=("raw.fastgit.org" "raw.gitfast.tk") # "raw.fastgit.org" https://ghproxy.com/

#  Github国内镜像网站
_github_mirror_speed_up(){
	# args：$1 $2
	# $((RANDOM%3)) -> [0,3)
	case $1 in
	clone)
		n=${#CLONE_SPEED_UP_LINK[@]}
		r=$((RANDOM%n))
		if [ $r -eq 0 ];then
			url="${CLONE_SPEED_UP_LINK[0]}"
			url=$(echo $2 | sed "s#https://#$url#g")
		elif [ $r -eq 1 ];then
			url="${CLONE_SPEED_UP_LINK[1]}${2}"
		fi
		;;
	release)
		n=${#RELEASE_SPEED_UP_LINK[@]}
		r=$((RANDOM%n))
		if [ $r -eq 0 ];then
			url="${RELEASE_SPEED_UP_LINK[0]}${2}"
		elif [ $r -eq 1 ];then
			url="${RELEASE_SPEED_UP_LINK[1]}${2}"
		fi
		;;
	raw)
		n=${#RAW_SPEED_UP_LINK[@]}
		r=$((RANDOM%n))
		#echo $((RANDOM%1))
		if [ $r -eq 0 ];then
			url="${RAW_SPEED_UP_LINK[0]}"
			url=$(awk -F "/" "{\$3 = \"$url\" ; print \$0}" OFS="/" <<<${2})
		elif [ $r -eq 1 ];then
			url="${RAW_SPEED_UP_LINK[1]}"
			url=$(awk -F "/" "{\$3 = \"$url\" ; print \$0}" OFS="/" <<<${2})
		fi
		;;
	esac
}

# some function
_enter() { echo -en "\n${GREEN}Press Enter to continue${WHITE}";read op ;:;}
# 自定义通告颜色 
_msg() {
	# I：消息
	# W：警告
	# E：错误
	case $1 in
	I)
		echo -e "\n${GREEN}I：$2${WHITE}"
		;;
	W)
		echo -e "\n${YELLOW}W：$2${WHITE}"
		;;
	E)
		echo -e "\n${RED}E：$2${WHITE}"
		;;
	esac 
}

# 栈模拟，菜单多级控制
export stack=()
_node(){
		#echo "------$*------"
		stack[${#stack[@]}]="$*"
		while :
		do
			# exec
			while :
			do
			[ "$((${#stack[@]}-1))" == "-1" ] && exit
				${stack[$((${#stack[@]}-1))]}
				case $? in
				0)
					#echo "取消前${stack[*]}"
					unset stack[$((${#stack[@]}-1))]
					#echo "取消后${stack[*]}"
					#_enter
					break
					;;
				255)
					#echo "取消前${stack[*]}"
					unset stack[$((${#stack[@]}-1))]
					unset stack[$((${#stack[@]}-2))]
					#echo "取消后${stack[*]}"
					#_enter
					break					
					;;
				esac
			done		
		done
}

_checkInstall(){
	Path="$1"
	if [ -e "$Path" ];then
		_msg W "检测到本地已安装"
		echo -en "${RED}是否需要卸载[Y/N]${WHITE}" ""
		read op
		case $op in
			y|Y)
				echo -en "${RED}回车两次即可卸载！${WHITE}" ""
				_enter;_enter
				 rm -rf $Path
	   				_msg W "移除完成！"
	   				_enter
	   				return 0
				;;
			*)
				return -1
				;;
		esac
	fi
	return 0
}


# exec command
_command(){
	if [ "$1" == "-clone" ];then
		status=1
		shift 1
	elif [ "$1" == "-release" ];then
		status=2
		shift 1
	elif [ "$1" == "-raw" ];then
		status=3
		shift 1
	fi
	# args：$1 $2 $3
	case $# in
	1)
		echo -e "\n${BLUE}[*]$white${GREEN}$1${WHITE}"
		command $1
		;;
	*)
		for x in $2
		do
			while :
			do
				y=$x
				if [ "$status" == "1" ];then
					_github_mirror_speed_up clone $x
					y=$url
				elif [ "$status" == "2" ];then
					_github_mirror_speed_up release $x
					y=$url				
				elif [ "$status" == "3" ];then
					_github_mirror_speed_up raw $x
					y=$url
				fi
				echo -e "\n${BLUE}[*]$white${GREEN}$1 $y $3 ${WHITE}"
				command="$1 $y $3"
				command $command
				if [ "$?" == "0" ];then
					break
				else
					echo -e "\n${RED}Erro：Failed，please try again！${WHITE}"
					_enter
				fi
			done
		done		
		;;
	esac
}

# dialog
_dialog(){
	export PORT=1
	n=0
	count=1
	for x in ${OPTIONS[*]}
	do		
		OPTIONS[$n]=$count
		let n++
		OPTIONS[$n]=$x
		let n++
		let count++
	done

	dialog --clear \
		--backtitle "$1" \
		--title "@参(•̀⌄•́)芜湖起飞" \
	 	--nocancel \
	 	--menu "$2" 20 40 8 \
		"${OPTIONS[@]}" \
	 	2>$HOME/menu
	 	
	export op=`cat $HOME/menu`
}

# 更新脚本
_update(){
	[ -z "$(command -v wget)" ] && _command "yes | pkg update" && _command "pkg i -y" "wget"
	rm -rf $HOME/.cache/download
	mkdir -p $HOME/.cache/download $HOME/.config/td
	#rm -rf $PREFIX/bin/td $ThreeDays
	cd $HOME/.cache/download
	# fun文件
	#_command "-raw" "wget -c" "$THREEDAYS_RAW"
	_command "wget -c" "$THREEDAYS_RAW"
	# GUI
	#_command "-raw" "wget -c" "$GUI_RAW"
	_command "wget -c" "$GUI_RAW"
	# main脚本
	#_command "-raw" "wget -c" "$TERMUX_AARCH64_TD_RAW"
	_command "wget -c" "$TERMUX_AARCH64_TD_RAW"
	# version
	#_command "-raw" "wget -c" "$VERSION_RAW"
	_command "wget -c" "$VERSION_RAW"
	# mv
	mv -f ThreeDays $HOME/.config/td/ThreeDays
	mv -f GUI $HOME/.config/td/GUI
	mv -f version $HOME/.config/td/version
	mv -f td $PREFIX/bin/td
	rm -rf $HOME/.cache/download
	chmod 775 $PREFIX/bin/td
	echo -e "\n${GREEN}[$(date +"%Y年%m月%d日-%H时%M分%S秒")]更新成功！${WHITE}"
	echo -e "\nRun the ${RED}td${WHITE} command to start\n"
	_enter
	exit
}


# main
_main(){
	OPTIONS=(
         "终端美化"
         "更换源sources.list"
         "更新脚本"
         "GUI"
         "其他选项"
         "退出脚本")
    
    _dialog "首页" "使用↑↓选择，也可以用手点击选项再回车哦" $OPTIONS
    case $op in 
    	1)
			_node  _style
			;;
    	2)
			_node  _sources
			;;
    	3)
			_node  _update
			;;
    	4)
			_node _GUI
			;;
    	5)
			_node _otherOP
			;;
    	*)
    	    clear
    	    return 0
			;;
    esac
}


# 环境准备
[ -z "$(command -v dialog)" ] && _command "pkg i -y" "dialog"
[ -z "$(command -v git)" ] && _command "pkg i -y" "git"
[ -z "$(dpkg -l | grep termux-services)" ] && _command "pkg i -y" "termux-services"
[ -z "$(dpkg -l | grep termux-gui-package)" ] && _command "pkg i -y" "termux-gui-package"
if [ -z "$(dpkg -l | grep termux-api)" ];then
	_command "pkg i -y" "termux-api"
	_msg W "打开手机设置→应用权限→Termux系列，给存储权限+通知权限+自启动"
	_enter
fi
if [ -z "$(dpkg -l | grep termux-x11)" ];then
	_command "pkg i -y" "x11-repo"
	_command "pkg i -y" "xwayland"
	_command "-raw" "wget -c" "$TERMUX_X11_RAW"
	_command "apt install " "./termux-x11.deb"
	rm -rf ./termux-x11.deb
fi
[ ! -e "$HOME/storage" ] && _command "termux-setup-storage" 
if [ ! -e "$ThreeDays" ] || [ "$(cat $ThreeDays | wc -l)" == "0" ];then
	_update
fi
if [ ! -e "$GUI" ] || [ "$(cat $GUI | wc -l)" == "0" ];then
	_update
fi
for x in $ThreeDays $GUI 
do
	[ ! -e "$x" ] || [ "$(cat $x | wc -l)" == "0" ] && _update
done

source $ThreeDays
source $GUI
# auto update
{
	_github_mirror_speed_up raw $VERSION_RAW
	mkdir -p $HOME/.cache/td
	# 获取版本信息
	for x in $(seq 0 5)
	do
		curl -s $url > $HOME/.cache/td/v && status=0 && break
	done
	if [ "$status" == "0" ];then
		new_version=($(cat $HOME/.cache/td/v | awk -F "." '{print $1,$2,$3}'))
		old_version=($(cat $HOME/.config/td/version | awk -F "." '{print $1,$2,$3}'))
		for x in $(seq 0 2)
		do
			[ ${new_version[$x]} -gt ${old_version[$x]} ] && termux-toast -c red -s "td脚本有更新"
		done
	fi
}&
# main
_node _main
